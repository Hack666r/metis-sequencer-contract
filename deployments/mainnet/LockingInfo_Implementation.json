{
  "address": "0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBatchId",
          "type": "uint256"
        }
      ],
      "name": "BatchSubmitReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "LockUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "activationBatch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "Relocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMaxLock",
          "type": "uint256"
        }
      ],
      "name": "SetMaxLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinLock",
          "type": "uint256"
        }
      ],
      "name": "SetMinLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        }
      ],
      "name": "SetRewardPayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSigner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "SignerChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deactivationBatch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deactivationTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockClaimTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnlockInit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalReward",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_l2gas",
          "type": "uint32"
        }
      ],
      "name": "finalizeUnlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_incoming",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fromReward",
          "type": "uint256"
        }
      ],
      "name": "increaseLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2gas",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "rewardRecipient",
              "type": "address"
            },
            {
              "internalType": "enum ISequencerInfo.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ISequencerInfo.Sequencer",
          "name": "_seq",
          "type": "tuple"
        }
      ],
      "name": "initializeUnlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_l2gas",
          "type": "uint32"
        }
      ],
      "name": "liquidateReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oldSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "logSignerChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "newSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLock",
          "type": "uint256"
        }
      ],
      "name": "setMaxLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLock",
          "type": "uint256"
        }
      ],
      "name": "setMinLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        }
      ],
      "name": "setRewardPayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsLiquidated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_locked",
          "type": "uint256"
        }
      ],
      "name": "withdrawLocking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2bccb8aba40915735050dd74f8bd2f37ff1039c2383441857a836d7f5e1d2c1",
  "receipt": {
    "to": null,
    "from": "0x001088E383A00ff4ab36F37f7021Cb6d7B415751",
    "contractAddress": "0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC",
    "transactionIndex": 10,
    "gasUsed": "1579654",
    "logsBloom": "0x
    "blockHash": "0xb64cf3f0d4fbe052c9485683553fa3bb53e49eb91312b6901d62ac294b3273b0",
    "transactionHash": "0xd2bccb8aba40915735050dd74f8bd2f37ff1039c2383441857a836d7f5e1d2c1",
    "logs": [],
    "blockNumber": 20076427,
    "cumulativeGasUsed": "3017747",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d1cd88c14ea1739befb49961a5c6dfa8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBatchId\",\"type\":\"uint256\"}],\"name\":\"BatchSubmitReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"LockUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxLock\",\"type\":\"uint256\"}],\"name\":\"SetMaxLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinLock\",\"type\":\"uint256\"}],\"name\":\"SetMinLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"SetRewardPayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"}],\"name\":\"SignerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_l2gas\",\"type\":\"uint32\"}],\"name\":\"finalizeUnlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incoming\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromReward\",\"type\":\"uint256\"}],\"name\":\"increaseLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2gas\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"enum ISequencerInfo.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ISequencerInfo.Sequencer\",\"name\":\"_seq\",\"type\":\"tuple\"}],\"name\":\"initializeUnlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_l2gas\",\"type\":\"uint32\"}],\"name\":\"liquidateReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"}],\"name\":\"logSignerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"newSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLock\",\"type\":\"uint256\"}],\"name\":\"setMaxLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLock\",\"type\":\"uint256\"}],\"name\":\"setMinLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"setRewardPayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsLiquidated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_locked\",\"type\":\"uint256\"}],\"name\":\"withdrawLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BatchSubmitReward(uint256)\":{\"details\":\"Emitted when batch update in  'batchSubmitRewards'\",\"params\":{\"_newBatchId\":\"new batchId.      Note from maintainer:      for compatibility, the event is retained\"}},\"ClaimRewards(uint256,address,uint256,uint256)\":{\"details\":\"Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\",\"params\":{\"amount\":\"the reward amount.\",\"recipient\":\"the address receive reward tokens\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"totalAmount\":\"total rewards has liquidated\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"LockUpdate(uint256,uint256,uint256)\":{\"details\":\"Emitted when sequencer relocking in 'relock()'.\",\"params\":{\"newAmount\":\"the updated lock amount.\",\"nonce\":\"to synchronize the events in themis.\",\"sequencerId\":\"unique integer to identify a sequencer.\"}},\"Locked(address,uint256,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"Emitted when sequencer locks in '_lockFor()' in LockingPool.\",\"params\":{\"activationBatch\":\"sequencer's first epoch as proposer.\",\"amount\":\"locking amount.\",\"nonce\":\"to synchronize the events in themis.\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"signer\":\"sequencer address.\",\"signerPubkey\":\"public key of the sequencer\",\"total\":\"total locking amount.\"}},\"Relocked(uint256,uint256,uint256)\":{\"details\":\"Emitted when the sequencer increase lock amount in 'relock()'.\",\"params\":{\"amount\":\"locking new amount\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"total\":\"the total locking amount\"}},\"SetMaxLock(uint256)\":{\"details\":\"Emitted when min lock amount update in 'UpdateMaxAmounts'\",\"params\":{\"_newMaxLock\":\"new max lock.\"}},\"SetMinLock(uint256)\":{\"details\":\"Emitted when min lock amount update in 'UpdateMinAmounts'\",\"params\":{\"_newMinLock\":\"new min lock.\"}},\"SetRewardPayer(address)\":{\"details\":\"Emitted when the reward payer is changed\",\"params\":{\"_payer\":\"new reward payer\"}},\"SignerChange(uint256,uint256,address,address,bytes)\":{\"details\":\"Emitted when the sequencer public key is updated in 'updateSigner()'.\",\"params\":{\"newSigner\":\"newSigner new address of the sequencer.\",\"nonce\":\"to synchronize the events in themis.\",\"oldSigner\":\"oldSigner old address of the sequencer.\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"signerPubkey\":\"signerPubkey public key of the sequencer.\"}},\"UnlockInit(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when sequencer unlocks in '_unlock()'.\",\"params\":{\"amount\":\"locking amount\",\"deactivationBatch\":\"last batch for sequencer.\",\"deactivationTime\":\"unlock block timestamp.\",\"nonce\":\"to synchronize the events in themis.\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"unlockClaimTime\":\"when user can claim locked token.\",\"user\":\"address of the sequencer.\"}},\"Unlocked(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when sequencer unlocks in 'unlockClaim()'\",\"params\":{\"amount\":\"locking amount.\",\"sequencerId\":\"unique integer to identify a sequencer.\",\"total\":\"total locking amount.\",\"user\":\"address of the sequencer.\"}},\"Withdraw(uint256,uint256)\":{\"details\":\"Emitted when the sequencer reduce lock amount in 'withdraw()'.\",\"params\":{\"amount\":\"withdraw new amount\",\"sequencerId\":\"unique integer to identify a sequencer.\"}}},\"kind\":\"dev\",\"methods\":{\"distributeReward(uint256,uint256)\":{\"details\":\"distributeReward reward distribution\",\"params\":{\"_batchId\":\"The batchId that submitted the reward is that\"}},\"finalizeUnlock(address,uint256,uint256,uint256,address,uint32)\":{\"details\":\"finalizeUnlock the last step to unlock\",\"params\":{\"_amount\":\"locked amount\",\"_l2gas\":\"the l2gas for L1bridge\",\"_operator\":\"the sequencer id\",\"_recipient\":\"recipient\",\"_reward\":\"reward amount\",\"_seqId\":\"the sequencer id\"}},\"increaseLocked(uint256,uint256,address,uint256,uint256,uint256)\":{\"details\":\"increaseLocked lock tokens to the sequencer, it can only be called from manager contract\",\"params\":{\"_fromReward\":\"use reward to lock\",\"_incoming\":\"amount from current transaction\",\"_locked\":\"the locked amount of the sequencer at last\",\"_nonce\":\"the sequencer nonce\",\"_owner\":\"the sequencer owner address\",\"_seqId\":\"the sequencer id\"}},\"initializeUnlock(uint256,uint256,uint32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes,address,uint8))\":{\"details\":\"initializeUnlock the first step to unlock      current reward will be distributed\",\"params\":{\"_l2gas\":\"the l2gas for L1bridge\",\"_reward\":\"the reward to withdraw\",\"_seq\":\"the current sequencer state\",\"_seqId\":\"the sequencer id\"}},\"logSignerChange(uint256,address,address,uint256,bytes)\":{\"details\":\"logSignerChange log event SignerChange\"},\"newSequencer(uint256,address,address,uint256,uint256,bytes)\":{\"details\":\"newSequencer register a new sequencer, it can only be called from manager contract\",\"params\":{\"_amount\":\"the amount to lock in\",\"_batchId\":\"current batch id\",\"_id\":\"the sequencer id\",\"_owner\":\"the sequencer owenr\",\"_signer\":\"the sequencer node address\",\"_signerPubkey\":\"the sequencer public key\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMaxLock(uint256)\":{\"details\":\"setMaxLock Allow owner to update max lock amount\",\"params\":{\"_maxLock\":\"new max lock amount\"}},\"setMinLock(uint256)\":{\"details\":\"updateMinAmounts Allow owner to update min lock amount\",\"params\":{\"_minLock\":\"new min lock amount\"}},\"setRewardPayer(address)\":{\"details\":\"setRewardPayer update reward payer address by owner\",\"params\":{\"_payer\":\"new reward payer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawLocking(uint256,address,uint256,uint256,uint256)\":{\"details\":\"withdrawLocking is to withdraw locking\",\"params\":{\"_amount\":\"amount to withdraw\",\"_locked\":\"the locked amount of the sequencer at last\",\"_nonce\":\"the sequencer nonce\",\"_owner\":\"the sequencer owner address\",\"_seqId\":\"the sequencer id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockingInfo.sol\":\"LockingInfo\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/LockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IL1ERC20Bridge} from \\\"./interfaces/IL1ERC20Bridge.sol\\\";\\nimport {ILockingInfo} from \\\"./interfaces/ILockingInfo.sol\\\";\\nimport {ISequencerInfo} from \\\"./interfaces/ISequencerInfo.sol\\\";\\n\\ncontract LockingInfo is ILockingInfo, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address public bridge; // L1 metis bridge address\\n    address public l1Token; // L1 metis token address\\n    address public l2Token; // L2 metis token address\\n    uint256 public l2ChainId; // L2 metis chainId\\n\\n    uint256 public minLock; // min lock amount\\n    uint256 public maxLock; // max lock amount\\n\\n    uint256 public totalLocked; // the total locked amount\\n    uint256 public totalRewardsLiquidated;\\n\\n    // Locking pool address\\n    address public manager;\\n\\n    // the reward payer\\n    address public rewardPayer;\\n\\n    modifier OnlyManager() {\\n        require(msg.sender == manager, \\\"Not manager\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _bridge,\\n        address _l1Token,\\n        address _l2Token,\\n        uint256 _l2ChainId\\n    ) external initializer {\\n        bridge = _bridge;\\n        l1Token = _l1Token;\\n        l2Token = _l2Token;\\n        l2ChainId = _l2ChainId;\\n\\n        minLock = 20_000 ether;\\n        maxLock = 100_000 ether;\\n\\n        __Ownable_init();\\n    }\\n\\n    function initManager(address _manager) external onlyOwner {\\n        require(manager == address(0), \\\"manager has been initialized\\\");\\n        manager = _manager;\\n    }\\n\\n    /**\\n     * @dev updateMinAmounts Allow owner to update min lock amount\\n     * @param _minLock new min lock amount\\n     */\\n    function setMinLock(uint256 _minLock) external onlyOwner {\\n        require(_minLock > 0, \\\"_minLock=0\\\");\\n        minLock = _minLock;\\n        emit SetMinLock(_minLock);\\n    }\\n\\n    /**\\n     * @dev setMaxLock Allow owner to update max lock amount\\n     * @param _maxLock new max lock amount\\n     */\\n    function setMaxLock(uint256 _maxLock) external onlyOwner {\\n        require(_maxLock >= minLock, \\\"maxLock<minLock\\\");\\n        maxLock = _maxLock;\\n        emit SetMaxLock(_maxLock);\\n    }\\n\\n    /**\\n     * @dev setRewardPayer update reward payer address by owner\\n     * @param _payer new reward payer\\n     */\\n    function setRewardPayer(address _payer) external onlyOwner {\\n        rewardPayer = _payer;\\n        emit SetRewardPayer(_payer);\\n    }\\n\\n    /**\\n     * @dev newSequencer register a new sequencer, it can only be called from manager contract\\n     * @param _id the sequencer id\\n     * @param _owner the sequencer owenr\\n     * @param _signer the sequencer node address\\n     * @param _amount the amount to lock in\\n     * @param _batchId current batch id\\n     * @param _signerPubkey the sequencer public key\\n     */\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external override OnlyManager {\\n        require(_amount >= minLock && _amount <= maxLock, \\\"invalid amount\\\");\\n\\n        // use local variable to save gas\\n        uint256 _tatalLocked = totalLocked + _amount;\\n        totalLocked = _tatalLocked;\\n\\n        IERC20(l1Token).safeTransferFrom(_owner, address(this), _amount);\\n        emit Locked(\\n            _signer,\\n            _id,\\n            1, // nocne starts from 1 for a new sequencer\\n            _batchId,\\n            _amount,\\n            _tatalLocked,\\n            _signerPubkey\\n        );\\n    }\\n\\n    /**\\n     * @dev increaseLocked lock tokens to the sequencer, it can only be called from manager contract\\n     * @param _seqId the sequencer id\\n     * @param _nonce the sequencer nonce\\n     * @param _owner the sequencer owner address\\n     * @param _locked the locked amount of the sequencer at last\\n     * @param _incoming amount from current transaction\\n     * @param _fromReward use reward to lock\\n     */\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external override OnlyManager {\\n        require(_locked <= maxLock, \\\"locked>maxLock\\\");\\n\\n        // get increased number and transfer it into escrow\\n        uint256 increased = _incoming + _fromReward;\\n        require(increased > 0, \\\"No new locked added\\\");\\n        IERC20(l1Token).safeTransferFrom(_owner, address(this), _incoming);\\n\\n        // get current total locked and emit event\\n        uint256 _totalLocked = totalLocked + increased;\\n        totalLocked = _totalLocked;\\n\\n        emit Relocked(_seqId, increased, totalLocked);\\n        emit LockUpdate(_seqId, _nonce, _locked);\\n    }\\n\\n    /**\\n     * @dev withdrawLocking is to withdraw locking\\n     * @param _seqId the sequencer id\\n     * @param _owner the sequencer owner address\\n     * @param _nonce the sequencer nonce\\n     * @param _amount amount to withdraw\\n     * @param _locked the locked amount of the sequencer at last\\n     */\\n    function withdrawLocking(\\n        uint256 _seqId,\\n        address _owner,\\n        uint256 _nonce,\\n        uint256 _amount,\\n        uint256 _locked\\n    ) external override OnlyManager {\\n        require(_amount > 0 && _locked >= minLock, \\\"invalid amount\\\");\\n        // update current locked amount\\n        totalLocked -= _amount;\\n\\n        IERC20(l1Token).safeTransfer(_owner, _amount);\\n        emit Withdraw(_seqId, _amount);\\n        emit LockUpdate(_seqId, _nonce, _locked);\\n    }\\n\\n    /**\\n     * @dev initializeUnlock the first step to unlock\\n     *      current reward will be distributed\\n     * @param _seqId the sequencer id\\n     * @param _reward the reward to withdraw\\n     * @param _seq the current sequencer state\\n     * @param _l2gas the l2gas for L1bridge\\n     */\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable override OnlyManager {\\n        _liquidateReward(_seqId, _reward, _seq.rewardRecipient, _l2gas);\\n        emit UnlockInit(\\n            _seq.signer,\\n            _seqId,\\n            _seq.nonce,\\n            _seq.deactivationBatch,\\n            _seq.deactivationTime,\\n            _seq.unlockClaimTime,\\n            _reward\\n        );\\n    }\\n\\n    /**\\n     * @dev finalizeUnlock the last step to unlock\\n     * @param _operator the sequencer id\\n     * @param _seqId the sequencer id\\n     * @param _amount locked amount\\n     * @param _reward reward amount\\n     * @param _recipient recipient\\n     * @param _l2gas the l2gas for L1bridge\\n     */\\n    function finalizeUnlock(\\n        address _operator,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable OnlyManager {\\n        // update totalLocked value\\n        uint256 _tatalLocked = totalLocked - _amount;\\n        totalLocked = _tatalLocked;\\n\\n        IERC20(l1Token).safeTransfer(_operator, _amount);\\n        if (_reward > 0) {\\n            _liquidateReward(_seqId, _reward, _recipient, _l2gas);\\n        }\\n        emit Unlocked(_operator, _seqId, _amount, _tatalLocked);\\n    }\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable override OnlyManager {\\n        _liquidateReward(_seqId, _amount, _recipient, _l2gas);\\n    }\\n\\n    /**\\n     * @dev distributeReward reward distribution\\n     * @param _batchId The batchId that submitted the reward is that\\n     */\\n    function distributeReward(\\n        uint256 _batchId,\\n        uint256 _totalReward\\n    ) external OnlyManager {\\n        // reward income\\n        IERC20(l1Token).safeTransferFrom(\\n            rewardPayer,\\n            address(this),\\n            _totalReward\\n        );\\n        emit BatchSubmitReward(_batchId);\\n    }\\n\\n    /**\\n     * @dev logSignerChange log event SignerChange\\n     */\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external OnlyManager {\\n        emit SignerChange(\\n            sequencerId,\\n            nonce,\\n            oldSigner,\\n            newSigner,\\n            signerPubkey\\n        );\\n    }\\n\\n    function _liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) internal {\\n        _bridgeTo(_recipient, _amount, _l2gas);\\n        uint256 total = totalRewardsLiquidated + _amount;\\n        totalRewardsLiquidated = total;\\n        emit ClaimRewards(_seqId, _recipient, _amount, total);\\n    }\\n\\n    function _bridgeTo(\\n        address _recipient,\\n        uint256 _amount,\\n        uint32 _l2gas\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        IERC20(l1Token).safeIncreaseAllowance(bridge, _amount);\\n        IL1ERC20Bridge(bridge).depositERC20ToByChainId{value: msg.value}(\\n            l2ChainId,\\n            l1Token,\\n            l2Token,\\n            _recipient,\\n            _amount,\\n            _l2gas,\\n            \\\"\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1a23a7c6af8a51db3a057189de396952edec5ea261e707af671925ec26d46dd9\",\"license\":\"MIT\"},\"contracts/interfaces/IL1ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/**\\n * @title IL1ERC20Bridge\\n */\\ninterface IL1ERC20Bridge {\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _chainid chainid\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20ToByChainId(\\n        uint256 _chainid,\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x15091001ac12bc6555621acbe0300cbb259a265dd4d57635c84e97b973054da6\",\"license\":\"MIT\"},\"contracts/interfaces/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amount in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when the sequencer reduce lock amount in 'withdraw()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount withdraw new amount\\n     */\\n    event Withdraw(uint256 indexed sequencerId, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     *\\n     *      Note from maintainer:\\n     *      for compatibility, the event is retained\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function withdrawLocking(\\n        uint256 _seqId,\\n        address _owner,\\n        uint256 _nonce,\\n        uint256 _amount,\\n        uint256 _locked\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\\n\",\"keccak256\":\"0x448fac8f690a6df68b0258bfdaaab589fab49ef89d7567e38fd09cfbf36b27b1\",\"license\":\"MIT\"},\"contracts/interfaces/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not claimed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consensus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\\n\",\"keccak256\":\"0x39dedc05518123f6ba34c08197075e0448c1594d97d34cceda02c968c09cb159\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50611b9d8061001d5f395ff3fe608060405260043610610199575f3560e01c8063aa15af6a116100dc578063cf756fdf11610087578063e78cea9211610062578063e78cea921461041b578063e8b8b4131461043a578063f037c63014610459578063f2fde38b1461046e575f80fd5b8063cf756fdf146103c8578063d6ae3cd5146103e7578063e3bcd27c146103fc575f80fd5b8063c01e1bd6116100b7578063c01e1bd614610375578063cd15b2a514610394578063cd6b8388146103b3575f80fd5b8063aa15af6a14610318578063b1fc19d314610337578063b328570214610356575f80fd5b806356891412116101475780636c0b3e46116101225780636c0b3e46146102b35780636eb27154146102c8578063715018a6146102e75780638da5cb5b146102fb575f80fd5b8063568914121461025e57806356eff267146102815780635d7878a8146102a0575f80fd5b80632684b8ec116101775780632684b8ec146101f0578063481c6a751461020f578063528ed12a1461024b575f80fd5b80631badded51461019d5780632243069c146101be578063234898b3146101d1575b5f80fd5b3480156101a8575f80fd5b506101bc6101b736600461170c565b61048d565b005b6101bc6101cc36600461179b565b6105b0565b3480156101dc575f80fd5b506101bc6101eb3660046117fd565b610693565b3480156101fb575f80fd5b506101bc61020a36600461183f565b6107c6565b34801561021a575f80fd5b50606d5461022e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bc61025936600461188c565b61095f565b348015610269575f80fd5b50610273606b5481565b604051908152602001610242565b34801561028c575f80fd5b5060675461022e906001600160a01b031681565b6101bc6102ae3660046118e7565b610a36565b3480156102be575f80fd5b50610273606a5481565b3480156102d3575f80fd5b50606e5461022e906001600160a01b031681565b3480156102f2575f80fd5b506101bc610a90565b348015610306575f80fd5b506033546001600160a01b031661022e565b348015610323575f80fd5b506101bc61033236600461192a565b610aa3565b348015610342575f80fd5b506101bc610351366004611941565b610b36565b348015610361575f80fd5b506101bc610370366004611961565b610bb9565b348015610380575f80fd5b5060665461022e906001600160a01b031681565b34801561039f575f80fd5b506101bc6103ae36600461192a565b610c59565b3480156103be575f80fd5b50610273606c5481565b3480156103d3575f80fd5b506101bc6103e23660046119d4565b610ce8565b3480156103f2575f80fd5b5061027360685481565b348015610407575f80fd5b506101bc610416366004611a1c565b610e64565b348015610426575f80fd5b5060655461022e906001600160a01b031681565b348015610445575f80fd5b506101bc610454366004611941565b610f01565b348015610464575f80fd5b5061027360695481565b348015610479575f80fd5b506101bc610488366004611941565b610f57565b606d546001600160a01b031633146104da5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064015b60405180910390fd5b60695484101580156104ee5750606a548411155b61052b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104d1565b5f84606b5461053a9190611a50565b606b81905560665490915061055a906001600160a01b0316883088610fe7565b8388876001600160a01b03167fe6f1eb1f1d0ca344d03cf47b9e6ece8a7d3b196e38dd7dd2307cca75e26682a860018986898960405161059e959493929190611a91565b60405180910390a45050505050505050565b606d546001600160a01b031633146105f85760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b610615848461060f61018085016101608601611941565b8561107f565b828461062961014084016101208501611941565b6040805160e08601358152608080870135602083015260a08701359282019290925260c086013560608201526001600160a01b0392909216917f06d9e13438f0daf13a71d63f3f8579db8bdeb299e4b651942313c73224d7af69910160405180910390a450505050565b606d546001600160a01b031633146106db5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b5f821180156106ec57506069548110155b6107295760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104d1565b81606b5f82825461073a9190611ab6565b9091555050606654610756906001600160a01b031685846110ea565b847f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c88360405161078891815260200190565b60405180910390a28083867fd716c027b3dd610e4534df756848128bbb159a757724c17d89fcc4d0151b1f3060405160405180910390a45050505050565b606d546001600160a01b0316331461080e5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b606a548311156108605760405162461bcd60e51b815260206004820152600e60248201527f6c6f636b65643e6d61784c6f636b00000000000000000000000000000000000060448201526064016104d1565b5f61086b8284611a50565b90505f81116108bc5760405162461bcd60e51b815260206004820152601360248201527f4e6f206e6577206c6f636b65642061646465640000000000000000000000000060448201526064016104d1565b6066546108d4906001600160a01b0316863086610fe7565b5f81606b546108e39190611a50565b606b819055604080518481526020810183905291925089917f33a87ba488658b3d1319098cd49c6d65b72a79c0f3530fec611e7afffed04395910160405180910390a28487897fd716c027b3dd610e4534df756848128bbb159a757724c17d89fcc4d0151b1f3060405160405180910390a45050505050505050565b606d546001600160a01b031633146109a75760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b5f84606b546109b69190611ab6565b606b8190556066549091506109d5906001600160a01b031688876110ea565b83156109e7576109e78685858561107f565b604080518681526020810183905287916001600160a01b038a16917f5245d528087a96a64f4589a764f00061e4671eab90cb1e019b1a5b24b2e4c2a8910160405180910390a350505050505050565b606d546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b610a8a8484848461107f565b50505050565b610a9861111f565b610aa15f611179565b565b610aab61111f565b5f8111610afa5760405162461bcd60e51b815260206004820152600a60248201527f5f6d696e4c6f636b3d300000000000000000000000000000000000000000000060448201526064016104d1565b60698190556040518181527fabb05374bb45ebfef33afb21ec5aa52333708d8217fd8e5c0616efd2530b2145906020015b60405180910390a150565b610b3e61111f565b606d546001600160a01b031615610b975760405162461bcd60e51b815260206004820152601c60248201527f6d616e6167657220686173206265656e20696e697469616c697a65640000000060448201526064016104d1565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b606d546001600160a01b03163314610c015760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b836001600160a01b0316856001600160a01b0316877f086044c0612a8c965d4cccd907f0d588e40ad68438bd4c1274cac60f4c3a9d1f868686604051610c4993929190611ac9565b60405180910390a4505050505050565b610c6161111f565b606954811015610cb35760405162461bcd60e51b815260206004820152600f60248201527f6d61784c6f636b3c6d696e4c6f636b000000000000000000000000000000000060448201526064016104d1565b606a8190556040518181527fbe23e9641c545443c3c625039b327c0eee88e9024040be7b03c5d73862d425e090602001610b2b565b5f54610100900460ff1615808015610d0657505f54600160ff909116105b80610d1f5750303b158015610d1f57505f5460ff166001145b610d915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104d1565b5f805460ff191660011790558015610db2575f805461ff0019166101001790555b606580546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805492861692909116919091179055606882905569043c33c193756480000060695569152d02c7e14af6800000606a55610e186111ca565b8015610e5d575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b606d546001600160a01b03163314610eac5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b606e54606654610eca916001600160a01b0391821691163084610fe7565b6040518281527f9e5aedd489785d05ba086064386f2e75b3e497d3dc00a54ed1c78bfc50a3953f9060200160405180910390a15050565b610f0961111f565b606e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f30b92f5a89d7473895c4e9ce260fa7d0eefef2d59d5e68192e2e8cca4b9473a090602001610b2b565b610f5f61111f565b6001600160a01b038116610fdb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d1565b610fe481611179565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052610a8a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261123c565b61108a828483611322565b5f83606c546110999190611a50565b606c8190556040516001600160a01b03851681529091508190859087907f18c7dc2a1800c409227dc12c0c05ada9c995ebfe0e42ae6d65f1b3ae3e6111de9060200160405180910390a45050505050565b6040516001600160a01b03831660248201526044810182905261111a90849063a9059cbb60e01b9060640161101b565b505050565b6033546001600160a01b03163314610aa15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166112345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104d1565b610aa16113ee565b5f611290826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114619092919063ffffffff16565b905080515f14806112b05750808060200190518101906112b09190611aeb565b61111a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104d1565b815f0361132e57505050565b60655460665461134b916001600160a01b03918216911684611477565b6065546068546066546067546040516377c045f160e11b815260048101939093526001600160a01b0391821660248401528116604483015285811660648301526084820185905263ffffffff841660a483015260e060c48301525f60e48301529091169063ef808be2903490610104015f604051808303818588803b1580156113d2575f80fd5b505af11580156113e4573d5f803e3d5ffd5b5050505050505050565b5f54610100900460ff166114585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104d1565b610aa133611179565b606061146f84845f85611521565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301525f919085169063dd62ed3e90604401602060405180830381865afa1580156114c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e89190611b0a565b9050610a8a8463095ea7b360e01b856115018686611a50565b6040516001600160a01b039092166024830152604482015260640161101b565b6060824710156115995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104d1565b5f80866001600160a01b031685876040516115b49190611b43565b5f6040518083038185875af1925050503d805f81146115ee576040519150601f19603f3d011682016040523d82523d5f602084013e6115f3565b606091505b50915091506116048783838761160f565b979650505050505050565b6060831561167d5782515f03611676576001600160a01b0385163b6116765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d1565b508161146f565b61146f83838151156116925781518083602001fd5b8060405162461bcd60e51b81526004016104d19190611b5e565b80356001600160a01b03811681146116c2575f80fd5b919050565b5f8083601f8401126116d7575f80fd5b50813567ffffffffffffffff8111156116ee575f80fd5b602083019150836020828501011115611705575f80fd5b9250929050565b5f805f805f805f60c0888a031215611722575f80fd5b87359650611732602089016116ac565b9550611740604089016116ac565b9450606088013593506080880135925060a088013567ffffffffffffffff811115611769575f80fd5b6117758a828b016116c7565b989b979a50959850939692959293505050565b803563ffffffff811681146116c2575f80fd5b5f805f80608085870312156117ae575f80fd5b84359350602085013592506117c560408601611788565b9150606085013567ffffffffffffffff8111156117e0575f80fd5b85016101a081880312156117f2575f80fd5b939692955090935050565b5f805f805f60a08688031215611811575f80fd5b85359450611821602087016116ac565b94979496505050506040830135926060810135926080909101359150565b5f805f805f8060c08789031215611854575f80fd5b863595506020870135945061186b604088016116ac565b9350606087013592506080870135915060a087013590509295509295509295565b5f805f805f8060c087890312156118a1575f80fd5b6118aa876116ac565b95506020870135945060408701359350606087013592506118cd608088016116ac565b91506118db60a08801611788565b90509295509295509295565b5f805f80608085870312156118fa575f80fd5b8435935060208501359250611911604086016116ac565b915061191f60608601611788565b905092959194509250565b5f6020828403121561193a575f80fd5b5035919050565b5f60208284031215611951575f80fd5b61195a826116ac565b9392505050565b5f805f805f8060a08789031215611976575f80fd5b86359550611986602088016116ac565b9450611994604088016116ac565b935060608701359250608087013567ffffffffffffffff8111156119b6575f80fd5b6119c289828a016116c7565b979a9699509497509295939492505050565b5f805f80608085870312156119e7575f80fd5b6119f0856116ac565b93506119fe602086016116ac565b9250611a0c604086016116ac565b9396929550929360600135925050565b5f8060408385031215611a2d575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52601160045260245ffd5b80820180821115611a6357611a63611a3c565b92915050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b858152846020820152836040820152608060608201525f611604608083018486611a69565b81810381811115611a6357611a63611a3c565b838152604060208201525f611ae2604083018486611a69565b95945050505050565b5f60208284031215611afb575f80fd5b8151801515811461195a575f80fd5b5f60208284031215611b1a575f80fd5b5051919050565b5f5b83811015611b3b578181015183820152602001611b23565b50505f910152565b5f8251611b54818460208701611b21565b9190910192915050565b602081525f8251806020840152611b7c816040850160208701611b21565b601f01601f1916919091016040019291505056fea164736f6c6343000818000a",
  "deployedBytecode": "0x608060405260043610610199575f3560e01c8063aa15af6a116100dc578063cf756fdf11610087578063e78cea9211610062578063e78cea921461041b578063e8b8b4131461043a578063f037c63014610459578063f2fde38b1461046e575f80fd5b8063cf756fdf146103c8578063d6ae3cd5146103e7578063e3bcd27c146103fc575f80fd5b8063c01e1bd6116100b7578063c01e1bd614610375578063cd15b2a514610394578063cd6b8388146103b3575f80fd5b8063aa15af6a14610318578063b1fc19d314610337578063b328570214610356575f80fd5b806356891412116101475780636c0b3e46116101225780636c0b3e46146102b35780636eb27154146102c8578063715018a6146102e75780638da5cb5b146102fb575f80fd5b8063568914121461025e57806356eff267146102815780635d7878a8146102a0575f80fd5b80632684b8ec116101775780632684b8ec146101f0578063481c6a751461020f578063528ed12a1461024b575f80fd5b80631badded51461019d5780632243069c146101be578063234898b3146101d1575b5f80fd5b3480156101a8575f80fd5b506101bc6101b736600461170c565b61048d565b005b6101bc6101cc36600461179b565b6105b0565b3480156101dc575f80fd5b506101bc6101eb3660046117fd565b610693565b3480156101fb575f80fd5b506101bc61020a36600461183f565b6107c6565b34801561021a575f80fd5b50606d5461022e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bc61025936600461188c565b61095f565b348015610269575f80fd5b50610273606b5481565b604051908152602001610242565b34801561028c575f80fd5b5060675461022e906001600160a01b031681565b6101bc6102ae3660046118e7565b610a36565b3480156102be575f80fd5b50610273606a5481565b3480156102d3575f80fd5b50606e5461022e906001600160a01b031681565b3480156102f2575f80fd5b506101bc610a90565b348015610306575f80fd5b506033546001600160a01b031661022e565b348015610323575f80fd5b506101bc61033236600461192a565b610aa3565b348015610342575f80fd5b506101bc610351366004611941565b610b36565b348015610361575f80fd5b506101bc610370366004611961565b610bb9565b348015610380575f80fd5b5060665461022e906001600160a01b031681565b34801561039f575f80fd5b506101bc6103ae36600461192a565b610c59565b3480156103be575f80fd5b50610273606c5481565b3480156103d3575f80fd5b506101bc6103e23660046119d4565b610ce8565b3480156103f2575f80fd5b5061027360685481565b348015610407575f80fd5b506101bc610416366004611a1c565b610e64565b348015610426575f80fd5b5060655461022e906001600160a01b031681565b348015610445575f80fd5b506101bc610454366004611941565b610f01565b348015610464575f80fd5b5061027360695481565b348015610479575f80fd5b506101bc610488366004611941565b610f57565b606d546001600160a01b031633146104da5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064015b60405180910390fd5b60695484101580156104ee5750606a548411155b61052b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104d1565b5f84606b5461053a9190611a50565b606b81905560665490915061055a906001600160a01b0316883088610fe7565b8388876001600160a01b03167fe6f1eb1f1d0ca344d03cf47b9e6ece8a7d3b196e38dd7dd2307cca75e26682a860018986898960405161059e959493929190611a91565b60405180910390a45050505050505050565b606d546001600160a01b031633146105f85760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b610615848461060f61018085016101608601611941565b8561107f565b828461062961014084016101208501611941565b6040805160e08601358152608080870135602083015260a08701359282019290925260c086013560608201526001600160a01b0392909216917f06d9e13438f0daf13a71d63f3f8579db8bdeb299e4b651942313c73224d7af69910160405180910390a450505050565b606d546001600160a01b031633146106db5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b5f821180156106ec57506069548110155b6107295760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104d1565b81606b5f82825461073a9190611ab6565b9091555050606654610756906001600160a01b031685846110ea565b847f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c88360405161078891815260200190565b60405180910390a28083867fd716c027b3dd610e4534df756848128bbb159a757724c17d89fcc4d0151b1f3060405160405180910390a45050505050565b606d546001600160a01b0316331461080e5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b606a548311156108605760405162461bcd60e51b815260206004820152600e60248201527f6c6f636b65643e6d61784c6f636b00000000000000000000000000000000000060448201526064016104d1565b5f61086b8284611a50565b90505f81116108bc5760405162461bcd60e51b815260206004820152601360248201527f4e6f206e6577206c6f636b65642061646465640000000000000000000000000060448201526064016104d1565b6066546108d4906001600160a01b0316863086610fe7565b5f81606b546108e39190611a50565b606b819055604080518481526020810183905291925089917f33a87ba488658b3d1319098cd49c6d65b72a79c0f3530fec611e7afffed04395910160405180910390a28487897fd716c027b3dd610e4534df756848128bbb159a757724c17d89fcc4d0151b1f3060405160405180910390a45050505050505050565b606d546001600160a01b031633146109a75760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b5f84606b546109b69190611ab6565b606b8190556066549091506109d5906001600160a01b031688876110ea565b83156109e7576109e78685858561107f565b604080518681526020810183905287916001600160a01b038a16917f5245d528087a96a64f4589a764f00061e4671eab90cb1e019b1a5b24b2e4c2a8910160405180910390a350505050505050565b606d546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b610a8a8484848461107f565b50505050565b610a9861111f565b610aa15f611179565b565b610aab61111f565b5f8111610afa5760405162461bcd60e51b815260206004820152600a60248201527f5f6d696e4c6f636b3d300000000000000000000000000000000000000000000060448201526064016104d1565b60698190556040518181527fabb05374bb45ebfef33afb21ec5aa52333708d8217fd8e5c0616efd2530b2145906020015b60405180910390a150565b610b3e61111f565b606d546001600160a01b031615610b975760405162461bcd60e51b815260206004820152601c60248201527f6d616e6167657220686173206265656e20696e697469616c697a65640000000060448201526064016104d1565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b606d546001600160a01b03163314610c015760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b836001600160a01b0316856001600160a01b0316877f086044c0612a8c965d4cccd907f0d588e40ad68438bd4c1274cac60f4c3a9d1f868686604051610c4993929190611ac9565b60405180910390a4505050505050565b610c6161111f565b606954811015610cb35760405162461bcd60e51b815260206004820152600f60248201527f6d61784c6f636b3c6d696e4c6f636b000000000000000000000000000000000060448201526064016104d1565b606a8190556040518181527fbe23e9641c545443c3c625039b327c0eee88e9024040be7b03c5d73862d425e090602001610b2b565b5f54610100900460ff1615808015610d0657505f54600160ff909116105b80610d1f5750303b158015610d1f57505f5460ff166001145b610d915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104d1565b5f805460ff191660011790558015610db2575f805461ff0019166101001790555b606580546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805492861692909116919091179055606882905569043c33c193756480000060695569152d02c7e14af6800000606a55610e186111ca565b8015610e5d575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b606d546001600160a01b03163314610eac5760405162461bcd60e51b815260206004820152600b60248201526a2737ba1036b0b730b3b2b960a91b60448201526064016104d1565b606e54606654610eca916001600160a01b0391821691163084610fe7565b6040518281527f9e5aedd489785d05ba086064386f2e75b3e497d3dc00a54ed1c78bfc50a3953f9060200160405180910390a15050565b610f0961111f565b606e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f30b92f5a89d7473895c4e9ce260fa7d0eefef2d59d5e68192e2e8cca4b9473a090602001610b2b565b610f5f61111f565b6001600160a01b038116610fdb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d1565b610fe481611179565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052610a8a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261123c565b61108a828483611322565b5f83606c546110999190611a50565b606c8190556040516001600160a01b03851681529091508190859087907f18c7dc2a1800c409227dc12c0c05ada9c995ebfe0e42ae6d65f1b3ae3e6111de9060200160405180910390a45050505050565b6040516001600160a01b03831660248201526044810182905261111a90849063a9059cbb60e01b9060640161101b565b505050565b6033546001600160a01b03163314610aa15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166112345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104d1565b610aa16113ee565b5f611290826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114619092919063ffffffff16565b905080515f14806112b05750808060200190518101906112b09190611aeb565b61111a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104d1565b815f0361132e57505050565b60655460665461134b916001600160a01b03918216911684611477565b6065546068546066546067546040516377c045f160e11b815260048101939093526001600160a01b0391821660248401528116604483015285811660648301526084820185905263ffffffff841660a483015260e060c48301525f60e48301529091169063ef808be2903490610104015f604051808303818588803b1580156113d2575f80fd5b505af11580156113e4573d5f803e3d5ffd5b5050505050505050565b5f54610100900460ff166114585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104d1565b610aa133611179565b606061146f84845f85611521565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301525f919085169063dd62ed3e90604401602060405180830381865afa1580156114c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e89190611b0a565b9050610a8a8463095ea7b360e01b856115018686611a50565b6040516001600160a01b039092166024830152604482015260640161101b565b6060824710156115995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104d1565b5f80866001600160a01b031685876040516115b49190611b43565b5f6040518083038185875af1925050503d805f81146115ee576040519150601f19603f3d011682016040523d82523d5f602084013e6115f3565b606091505b50915091506116048783838761160f565b979650505050505050565b6060831561167d5782515f03611676576001600160a01b0385163b6116765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d1565b508161146f565b61146f83838151156116925781518083602001fd5b8060405162461bcd60e51b81526004016104d19190611b5e565b80356001600160a01b03811681146116c2575f80fd5b919050565b5f8083601f8401126116d7575f80fd5b50813567ffffffffffffffff8111156116ee575f80fd5b602083019150836020828501011115611705575f80fd5b9250929050565b5f805f805f805f60c0888a031215611722575f80fd5b87359650611732602089016116ac565b9550611740604089016116ac565b9450606088013593506080880135925060a088013567ffffffffffffffff811115611769575f80fd5b6117758a828b016116c7565b989b979a50959850939692959293505050565b803563ffffffff811681146116c2575f80fd5b5f805f80608085870312156117ae575f80fd5b84359350602085013592506117c560408601611788565b9150606085013567ffffffffffffffff8111156117e0575f80fd5b85016101a081880312156117f2575f80fd5b939692955090935050565b5f805f805f60a08688031215611811575f80fd5b85359450611821602087016116ac565b94979496505050506040830135926060810135926080909101359150565b5f805f805f8060c08789031215611854575f80fd5b863595506020870135945061186b604088016116ac565b9350606087013592506080870135915060a087013590509295509295509295565b5f805f805f8060c087890312156118a1575f80fd5b6118aa876116ac565b95506020870135945060408701359350606087013592506118cd608088016116ac565b91506118db60a08801611788565b90509295509295509295565b5f805f80608085870312156118fa575f80fd5b8435935060208501359250611911604086016116ac565b915061191f60608601611788565b905092959194509250565b5f6020828403121561193a575f80fd5b5035919050565b5f60208284031215611951575f80fd5b61195a826116ac565b9392505050565b5f805f805f8060a08789031215611976575f80fd5b86359550611986602088016116ac565b9450611994604088016116ac565b935060608701359250608087013567ffffffffffffffff8111156119b6575f80fd5b6119c289828a016116c7565b979a9699509497509295939492505050565b5f805f80608085870312156119e7575f80fd5b6119f0856116ac565b93506119fe602086016116ac565b9250611a0c604086016116ac565b9396929550929360600135925050565b5f8060408385031215611a2d575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52601160045260245ffd5b80820180821115611a6357611a63611a3c565b92915050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b858152846020820152836040820152608060608201525f611604608083018486611a69565b81810381811115611a6357611a63611a3c565b838152604060208201525f611ae2604083018486611a69565b95945050505050565b5f60208284031215611afb575f80fd5b8151801515811461195a575f80fd5b5f60208284031215611b1a575f80fd5b5051919050565b5f5b83811015611b3b578181015183820152602001611b23565b50505f910152565b5f8251611b54818460208701611b21565b9190910192915050565b602081525f8251806020840152611b7c816040850160208701611b21565b601f01601f1916919091016040019291505056fea164736f6c6343000818000a",
  "devdoc": {
    "events": {
      "BatchSubmitReward(uint256)": {
        "details": "Emitted when batch update in  'batchSubmitRewards'",
        "params": {
          "_newBatchId": "new batchId.      Note from maintainer:      for compatibility, the event is retained"
        }
      },
      "ClaimRewards(uint256,address,uint256,uint256)": {
        "details": "Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'",
        "params": {
          "amount": "the reward amount.",
          "recipient": "the address receive reward tokens",
          "sequencerId": "unique integer to identify a sequencer.",
          "totalAmount": "total rewards has liquidated"
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "LockUpdate(uint256,uint256,uint256)": {
        "details": "Emitted when sequencer relocking in 'relock()'.",
        "params": {
          "newAmount": "the updated lock amount.",
          "nonce": "to synchronize the events in themis.",
          "sequencerId": "unique integer to identify a sequencer."
        }
      },
      "Locked(address,uint256,uint256,uint256,uint256,uint256,bytes)": {
        "details": "Emitted when sequencer locks in '_lockFor()' in LockingPool.",
        "params": {
          "activationBatch": "sequencer's first epoch as proposer.",
          "amount": "locking amount.",
          "nonce": "to synchronize the events in themis.",
          "sequencerId": "unique integer to identify a sequencer.",
          "signer": "sequencer address.",
          "signerPubkey": "public key of the sequencer",
          "total": "total locking amount."
        }
      },
      "Relocked(uint256,uint256,uint256)": {
        "details": "Emitted when the sequencer increase lock amount in 'relock()'.",
        "params": {
          "amount": "locking new amount",
          "sequencerId": "unique integer to identify a sequencer.",
          "total": "the total locking amount"
        }
      },
      "SetMaxLock(uint256)": {
        "details": "Emitted when min lock amount update in 'UpdateMaxAmounts'",
        "params": {
          "_newMaxLock": "new max lock."
        }
      },
      "SetMinLock(uint256)": {
        "details": "Emitted when min lock amount update in 'UpdateMinAmounts'",
        "params": {
          "_newMinLock": "new min lock."
        }
      },
      "SetRewardPayer(address)": {
        "details": "Emitted when the reward payer is changed",
        "params": {
          "_payer": "new reward payer"
        }
      },
      "SignerChange(uint256,uint256,address,address,bytes)": {
        "details": "Emitted when the sequencer public key is updated in 'updateSigner()'.",
        "params": {
          "newSigner": "newSigner new address of the sequencer.",
          "nonce": "to synchronize the events in themis.",
          "oldSigner": "oldSigner old address of the sequencer.",
          "sequencerId": "unique integer to identify a sequencer.",
          "signerPubkey": "signerPubkey public key of the sequencer."
        }
      },
      "UnlockInit(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when sequencer unlocks in '_unlock()'.",
        "params": {
          "amount": "locking amount",
          "deactivationBatch": "last batch for sequencer.",
          "deactivationTime": "unlock block timestamp.",
          "nonce": "to synchronize the events in themis.",
          "sequencerId": "unique integer to identify a sequencer.",
          "unlockClaimTime": "when user can claim locked token.",
          "user": "address of the sequencer."
        }
      },
      "Unlocked(address,uint256,uint256,uint256)": {
        "details": "Emitted when sequencer unlocks in 'unlockClaim()'",
        "params": {
          "amount": "locking amount.",
          "sequencerId": "unique integer to identify a sequencer.",
          "total": "total locking amount.",
          "user": "address of the sequencer."
        }
      },
      "Withdraw(uint256,uint256)": {
        "details": "Emitted when the sequencer reduce lock amount in 'withdraw()'.",
        "params": {
          "amount": "withdraw new amount",
          "sequencerId": "unique integer to identify a sequencer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "distributeReward(uint256,uint256)": {
        "details": "distributeReward reward distribution",
        "params": {
          "_batchId": "The batchId that submitted the reward is that"
        }
      },
      "finalizeUnlock(address,uint256,uint256,uint256,address,uint32)": {
        "details": "finalizeUnlock the last step to unlock",
        "params": {
          "_amount": "locked amount",
          "_l2gas": "the l2gas for L1bridge",
          "_operator": "the sequencer id",
          "_recipient": "recipient",
          "_reward": "reward amount",
          "_seqId": "the sequencer id"
        }
      },
      "increaseLocked(uint256,uint256,address,uint256,uint256,uint256)": {
        "details": "increaseLocked lock tokens to the sequencer, it can only be called from manager contract",
        "params": {
          "_fromReward": "use reward to lock",
          "_incoming": "amount from current transaction",
          "_locked": "the locked amount of the sequencer at last",
          "_nonce": "the sequencer nonce",
          "_owner": "the sequencer owner address",
          "_seqId": "the sequencer id"
        }
      },
      "initializeUnlock(uint256,uint256,uint32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes,address,uint8))": {
        "details": "initializeUnlock the first step to unlock      current reward will be distributed",
        "params": {
          "_l2gas": "the l2gas for L1bridge",
          "_reward": "the reward to withdraw",
          "_seq": "the current sequencer state",
          "_seqId": "the sequencer id"
        }
      },
      "logSignerChange(uint256,address,address,uint256,bytes)": {
        "details": "logSignerChange log event SignerChange"
      },
      "newSequencer(uint256,address,address,uint256,uint256,bytes)": {
        "details": "newSequencer register a new sequencer, it can only be called from manager contract",
        "params": {
          "_amount": "the amount to lock in",
          "_batchId": "current batch id",
          "_id": "the sequencer id",
          "_owner": "the sequencer owenr",
          "_signer": "the sequencer node address",
          "_signerPubkey": "the sequencer public key"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setMaxLock(uint256)": {
        "details": "setMaxLock Allow owner to update max lock amount",
        "params": {
          "_maxLock": "new max lock amount"
        }
      },
      "setMinLock(uint256)": {
        "details": "updateMinAmounts Allow owner to update min lock amount",
        "params": {
          "_minLock": "new min lock amount"
        }
      },
      "setRewardPayer(address)": {
        "details": "setRewardPayer update reward payer address by owner",
        "params": {
          "_payer": "new reward payer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawLocking(uint256,address,uint256,uint256,uint256)": {
        "details": "withdrawLocking is to withdraw locking",
        "params": {
          "_amount": "amount to withdraw",
          "_locked": "the locked amount of the sequencer at last",
          "_nonce": "the sequencer nonce",
          "_owner": "the sequencer owner address",
          "_seqId": "the sequencer id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1654,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "bridge",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1656,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "l1Token",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 1658,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "l2Token",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 1660,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "l2ChainId",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 1662,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "minLock",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 1664,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "maxLock",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 1666,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "totalLocked",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 1668,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "totalRewardsLiquidated",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "manager",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 1672,
        "contract": "contracts/LockingInfo.sol:LockingInfo",
        "label": "rewardPayer",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}