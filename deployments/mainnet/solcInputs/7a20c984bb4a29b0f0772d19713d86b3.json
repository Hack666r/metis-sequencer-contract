{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IL1ERC20Bridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\n/**\n * @title IL1ERC20Bridge\n */\ninterface IL1ERC20Bridge {\n    /**\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\n     * @param _chainid chainid\n     * @param _l1Token Address of the L1 ERC20 we are depositing\n     * @param _l2Token Address of the L1 respective L2 ERC20\n     * @param _to L2 address to credit the withdrawal to.\n     * @param _amount Amount of the ERC20 to deposit.\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\n     * @param _data Optional data to forward to L2. This data is provided\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\n     *        length, these contracts provide no guarantees about its content.\n     */\n    function depositERC20ToByChainId(\n        uint256 _chainid,\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ILockingInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {ISequencerInfo} from \"./ISequencerInfo.sol\";\n\ninterface ILockingInfo {\n    /**\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\n     * @param _newMinLock new min lock.\n     */\n    event SetMinLock(uint256 _newMinLock);\n\n    /**\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\n     * @param _newMaxLock new max lock.\n     */\n    event SetMaxLock(uint256 _newMaxLock);\n\n    /**\n     * @dev Emitted when the reward payer is changed\n     * @param _payer new reward payer\n     */\n    event SetRewardPayer(address _payer);\n\n    /**\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\n     * @param signer sequencer address.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param nonce to synchronize the events in themis.\n     * @param activationBatch sequencer's first epoch as proposer.\n     * @param amount locking amount.\n     * @param total total locking amount.\n     * @param signerPubkey public key of the sequencer\n     */\n    event Locked(\n        address indexed signer,\n        uint256 indexed sequencerId,\n        uint256 nonce,\n        uint256 indexed activationBatch,\n        uint256 amount,\n        uint256 total,\n        bytes signerPubkey\n    );\n\n    /**\n     * @dev Emitted when the sequencer increase lock amoun in 'relock()'.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param amount locking new amount\n     * @param total the total locking amount\n     */\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\n\n    /**\n     * @dev Emitted when sequencer relocking in 'relock()'.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param nonce to synchronize the events in themis.\n     * @param newAmount the updated lock amount.\n     */\n    event LockUpdate(\n        uint256 indexed sequencerId,\n        uint256 indexed nonce,\n        uint256 indexed newAmount\n    );\n\n    /**\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param recipient the address receive reward tokens\n     * @param amount the reward amount.\n     * @param totalAmount total rewards has liquidated\n     */\n    event ClaimRewards(\n        uint256 indexed sequencerId,\n        address recipient,\n        uint256 indexed amount,\n        uint256 indexed totalAmount\n    );\n\n    /**\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\n     * @param user address of the sequencer.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param nonce to synchronize the events in themis.\n     * @param deactivationBatch  last batch for sequencer.\n     * @param deactivationTime unlock block timestamp.\n     * @param unlockClaimTime when user can claim locked token.\n     * @param amount locking amount\n     */\n    event UnlockInit(\n        address indexed user,\n        uint256 indexed sequencerId,\n        uint256 nonce,\n        uint256 deactivationBatch,\n        uint256 deactivationTime,\n        uint256 unlockClaimTime,\n        uint256 indexed amount\n    );\n\n    /**\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\n     * @param user address of the sequencer.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param amount locking amount.\n     * @param total total locking amount.\n     */\n    event Unlocked(\n        address indexed user,\n        uint256 indexed sequencerId,\n        uint256 amount,\n        uint256 total\n    );\n\n    /**\n     * @dev Emitted when batch update in  'batchSubmitRewards'\n     * @param _newBatchId new batchId.\n     *\n     *      Note from maintainer:\n     *      for compatibility, the event is retained\n     */\n    event BatchSubmitReward(uint256 _newBatchId);\n\n    /**\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\n     * @param sequencerId unique integer to identify a sequencer.\n     * @param nonce to synchronize the events in themis.\n     * @param oldSigner oldSigner old address of the sequencer.\n     * @param newSigner newSigner new address of the sequencer.\n     * @param signerPubkey signerPubkey public key of the sequencer.\n     */\n    event SignerChange(\n        uint256 indexed sequencerId,\n        uint256 nonce,\n        address indexed oldSigner,\n        address indexed newSigner,\n        bytes signerPubkey\n    );\n\n    function newSequencer(\n        uint256 _id,\n        address _owner,\n        address _signer,\n        uint256 _amount,\n        uint256 _batchId,\n        bytes calldata _signerPubkey\n    ) external;\n\n    function increaseLocked(\n        uint256 _seqId,\n        uint256 _nonce,\n        address _owner,\n        uint256 _locked,\n        uint256 _incoming,\n        uint256 _fromReward\n    ) external;\n\n    function initializeUnlock(\n        uint256 _seqId,\n        uint256 _reward,\n        uint32 _l2gas,\n        ISequencerInfo.Sequencer calldata _seq\n    ) external payable;\n\n    function finalizeUnlock(\n        address _owner,\n        uint256 _seqId,\n        uint256 _amount,\n        uint256 _reward,\n        address _recipient,\n        uint32 _l2gas\n    ) external payable;\n\n    function liquidateReward(\n        uint256 _seqId,\n        uint256 _amount,\n        address _recipient,\n        uint32 _l2gas\n    ) external payable;\n\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\n\n    function logSignerChange(\n        uint256 sequencerId,\n        address oldSigner,\n        address newSigner,\n        uint256 nonce,\n        bytes calldata signerPubkey\n    ) external;\n}\n"
    },
    "contracts/interfaces/ILockingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.24;\n\ninterface ILockingPool {\n    /**\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\n     * @param _cur current withdraw delay time\n     * @param _prev previours withdraw delay time\n     */\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\n\n    /**\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\n     *      Note from maintainer:\n     *      for compatibility, this ambiguous event is retained\n     * @param newReward new block reward\n     * @param oldReward  old block reward\n     */\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\n\n    /**\n     * @dev Emitted when mpc address update in 'UpdateMpc'\n     * @param _newMpc new min lock.\n     */\n    event UpdateMpc(address _newMpc);\n\n    /**\n     * @dev Emitted when SignerUpdateThrottle is updated\n     * @param _n new min value\n     */\n    event SetSignerUpdateThrottle(uint256 _n);\n\n    /**\n     * @dev Emitted when rewards are distributed\n     * @param batchId the current batch id\n     * @param startEpoch start epoch number\n     * @param endEpoch end epoch number\n     * @param amount the total that distributed\n     * @param rpb the current reward per block\n     */\n    event DistributeReward(\n        uint256 indexed batchId,\n        uint256 startEpoch,\n        uint256 endEpoch,\n        uint256 amount,\n        uint256 rpb\n    );\n}\n"
    },
    "contracts/interfaces/ISequencerInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\ninterface ISequencerInfo {\n    error OwnedSequencer();\n    error SignerExisted();\n    error NoSuchSeq();\n    error NullAddress();\n    error SeqNotActive();\n    error NotSeqOwner();\n    error NotSeqSigner();\n    error NoRewardRecipient();\n    error NotWhitelisted();\n\n    // the sequencer status\n    enum Status {\n        Unavailabe, // placeholder for default value\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\n        Active, // the sequencer is active when it locks tokens on the contract\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\n    }\n\n    struct Sequencer {\n        uint256 amount; // sequencer current locked\n        uint256 reward; // sequencer current reward that have not claimed\n        uint256 activationBatch; // sequencer activation batch id\n        uint256 updatedBatch; // batch id of the last updated\n        uint256 deactivationBatch; // sequencer deactivation batch id\n        uint256 deactivationTime; // sequencer deactivation timestamp\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consensus client\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\n        bytes pubkey; // sequencer signer pubkey\n        address rewardRecipient; // sequencer rewarder recipient address\n        Status status; // sequencer status\n    }\n\n    /**\n     * @dev Emitted if owner call 'setWhitelist'\n     * @param _user the address who can lock token\n     * @param _yes white address state\n     */\n    event SetWhitelist(address _user, bool _yes);\n\n    /**\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\n     * @param _seqId the sequencerId\n     * @param _recipient the address receive reward token\n     */\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\n\n    /**\n     * @dev Emitted when sequencer owner is changed\n     * @param _seqId the sequencerId\n     * @param _owner the sequencer owner\n     */\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\n\n    function seqOwners(address owner) external returns (uint256 seqId);\n}\n"
    },
    "contracts/LockingInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport {IL1ERC20Bridge} from \"./interfaces/IL1ERC20Bridge.sol\";\nimport {ILockingInfo} from \"./interfaces/ILockingInfo.sol\";\nimport {ISequencerInfo} from \"./interfaces/ISequencerInfo.sol\";\n\ncontract LockingInfo is ILockingInfo, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    address public bridge; // L1 metis bridge address\n    address public l1Token; // L1 metis token address\n    address public l2Token; // L2 metis token address\n    uint256 public l2ChainId; // L2 metis chainId\n\n    uint256 public minLock; // min lock amount\n    uint256 public maxLock; // max lock amount\n\n    uint256 public totalLocked; // the total locked amount\n    uint256 public totalRewardsLiquidated;\n\n    // Locking pool address\n    address public manager;\n\n    // the reward payer\n    address public rewardPayer;\n\n    modifier OnlyManager() {\n        require(msg.sender == manager, \"Not manager\");\n        _;\n    }\n\n    function initialize(\n        address _bridge,\n        address _l1Token,\n        address _l2Token,\n        uint256 _l2ChainId\n    ) external initializer {\n        bridge = _bridge;\n        l1Token = _l1Token;\n        l2Token = _l2Token;\n        l2ChainId = _l2ChainId;\n\n        minLock = 20_000 ether;\n        maxLock = 100_000 ether;\n\n        __Ownable_init();\n    }\n\n    function initManager(address _manager) external onlyOwner {\n        require(manager == address(0), \"manager has been initialized\");\n        manager = _manager;\n    }\n\n    /**\n     * @dev updateMinAmounts Allow owner to update min lock amount\n     * @param _minLock new min lock amount\n     */\n    function setMinLock(uint256 _minLock) external onlyOwner {\n        require(_minLock > 0, \"_minLock=0\");\n        minLock = _minLock;\n        emit SetMinLock(_minLock);\n    }\n\n    /**\n     * @dev setMaxLock Allow owner to update max lock amount\n     * @param _maxLock new max lock amount\n     */\n    function setMaxLock(uint256 _maxLock) external onlyOwner {\n        require(_maxLock >= minLock, \"maxLock<minLock\");\n        maxLock = _maxLock;\n        emit SetMaxLock(_maxLock);\n    }\n\n    /**\n     * @dev setRewardPayer update reward payer address by owner\n     * @param _payer new reward payer\n     */\n    function setRewardPayer(address _payer) external onlyOwner {\n        rewardPayer = _payer;\n        emit SetRewardPayer(_payer);\n    }\n\n    /**\n     * @dev newSequencer register a new sequencer, it can only be called from manager contract\n     * @param _id the sequencer id\n     * @param _owner the sequencer owenr\n     * @param _signer the sequencer node address\n     * @param _amount the amount to lock in\n     * @param _batchId current batch id\n     * @param _signerPubkey the sequencer public key\n     */\n    function newSequencer(\n        uint256 _id,\n        address _owner,\n        address _signer,\n        uint256 _amount,\n        uint256 _batchId,\n        bytes calldata _signerPubkey\n    ) external override OnlyManager {\n        require(_amount >= minLock && _amount <= maxLock, \"invalid amount\");\n\n        // use local variable to save gas\n        uint256 _tatalLocked = totalLocked + _amount;\n        totalLocked = _tatalLocked;\n\n        IERC20(l1Token).safeTransferFrom(_owner, address(this), _amount);\n        emit Locked(\n            _signer,\n            _id,\n            1, // nocne starts from 1 for a new sequencer\n            _batchId,\n            _amount,\n            _tatalLocked,\n            _signerPubkey\n        );\n    }\n\n    /**\n     * @dev increaseLocked lock tokens to the sequencer, it can only be called from manager contract\n     * @param _seqId the sequencer id\n     * @param _nonce the sequencer nonce\n     * @param _owner the sequencer owner address\n     * @param _locked the locked amount of the sequencer at last\n     * @param _incoming amount from current transaction\n     * @param _fromReward use reward to lock\n     */\n    function increaseLocked(\n        uint256 _seqId,\n        uint256 _nonce,\n        address _owner,\n        uint256 _locked,\n        uint256 _incoming,\n        uint256 _fromReward\n    ) external override OnlyManager {\n        require(_locked <= maxLock, \"locked>maxLock\");\n\n        // get increased number and transfer it into escrow\n        uint256 increased = _incoming + _fromReward;\n        require(increased > 0, \"No new locked added\");\n        IERC20(l1Token).safeTransferFrom(_owner, address(this), _incoming);\n\n        // get current total locked and emit event\n        uint256 _totalLocked = totalLocked + increased;\n        totalLocked = _totalLocked;\n\n        emit Relocked(_seqId, increased, totalLocked);\n        emit LockUpdate(_seqId, _nonce, _locked);\n    }\n\n    /**\n     * @dev initializeUnlock the first step to unlock\n     *      current reward will be distributed\n     * @param _seqId the sequencer id\n     * @param _reward the reward to withdraw\n     * @param _seq the current sequencer state\n     * @param _l2gas the l2gas for L1bridge\n     */\n    function initializeUnlock(\n        uint256 _seqId,\n        uint256 _reward,\n        uint32 _l2gas,\n        ISequencerInfo.Sequencer calldata _seq\n    ) external payable override OnlyManager {\n        _liquidateReward(_seqId, _reward, _seq.rewardRecipient, _l2gas);\n        emit UnlockInit(\n            _seq.signer,\n            _seqId,\n            _seq.nonce,\n            _seq.deactivationBatch,\n            _seq.deactivationTime,\n            _seq.unlockClaimTime,\n            _reward\n        );\n    }\n\n    /**\n     * @dev finalizeUnlock the last step to unlock\n     * @param _operator the sequencer id\n     * @param _seqId the sequencer id\n     * @param _amount locked amount\n     * @param _reward reward amount\n     * @param _recipient recipient\n     * @param _l2gas the l2gas for L1bridge\n     */\n    function finalizeUnlock(\n        address _operator,\n        uint256 _seqId,\n        uint256 _amount,\n        uint256 _reward,\n        address _recipient,\n        uint32 _l2gas\n    ) external payable OnlyManager {\n        // update totalLocked value\n        uint256 _tatalLocked = totalLocked - _amount;\n        totalLocked = _tatalLocked;\n\n        IERC20(l1Token).safeTransfer(_operator, _amount);\n        if (_reward > 0) {\n            _liquidateReward(_seqId, _reward, _recipient, _l2gas);\n        }\n        emit Unlocked(_operator, _seqId, _amount, _tatalLocked);\n    }\n\n    function liquidateReward(\n        uint256 _seqId,\n        uint256 _amount,\n        address _recipient,\n        uint32 _l2gas\n    ) external payable override OnlyManager {\n        _liquidateReward(_seqId, _amount, _recipient, _l2gas);\n    }\n\n    /**\n     * @dev distributeReward reward distribution\n     * @param _batchId The batchId that submitted the reward is that\n     */\n    function distributeReward(\n        uint256 _batchId,\n        uint256 _totalReward\n    ) external OnlyManager {\n        // reward income\n        IERC20(l1Token).safeTransferFrom(\n            rewardPayer,\n            address(this),\n            _totalReward\n        );\n        emit BatchSubmitReward(_batchId);\n    }\n\n    /**\n     * @dev logSignerChange log event SignerChange\n     */\n    function logSignerChange(\n        uint256 sequencerId,\n        address oldSigner,\n        address newSigner,\n        uint256 nonce,\n        bytes calldata signerPubkey\n    ) external OnlyManager {\n        emit SignerChange(\n            sequencerId,\n            nonce,\n            oldSigner,\n            newSigner,\n            signerPubkey\n        );\n    }\n\n    function _liquidateReward(\n        uint256 _seqId,\n        uint256 _amount,\n        address _recipient,\n        uint32 _l2gas\n    ) internal {\n        _bridgeTo(_recipient, _amount, _l2gas);\n        uint256 total = totalRewardsLiquidated + _amount;\n        totalRewardsLiquidated = total;\n        emit ClaimRewards(_seqId, _recipient, _amount, total);\n    }\n\n    function _bridgeTo(\n        address _recipient,\n        uint256 _amount,\n        uint32 _l2gas\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        IERC20(l1Token).safeIncreaseAllowance(bridge, _amount);\n        IL1ERC20Bridge(bridge).depositERC20ToByChainId{value: msg.value}(\n            l2ChainId,\n            l1Token,\n            l2Token,\n            _recipient,\n            _amount,\n            _l2gas,\n            \"\"\n        );\n    }\n}\n"
    },
    "contracts/LockingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport {ILockingInfo} from \"./interfaces/ILockingInfo.sol\";\nimport {ILockingPool} from \"./interfaces/ILockingPool.sol\";\n\nimport {SequencerInfo} from \"./SequencerInfo.sol\";\n\ncontract LockingPool is ILockingPool, PausableUpgradeable, SequencerInfo {\n    struct BatchState {\n        uint256 id; // current batch id\n        uint256 number; // L1 block number when current batch is submitted\n        uint256 startEpoch; // start epoch number for current batch\n        uint256 endEpoch; // end epoch number for current batch\n    }\n\n    ILockingInfo public escrow;\n\n    // delay time for unlock\n    uint256 public exitDelayPeriod;\n\n    // reward per L2 block\n    uint256 public rewardPerBlock;\n\n    // the mpc address\n    address public mpcAddress;\n\n    // current batch state\n    BatchState public curBatchState;\n\n    // the number of batch that signer can be updated since the last update\n    uint256 public signerUpdateThrottle;\n\n    function initialize(address _escrow) external initializer {\n        exitDelayPeriod = 21 days;\n        rewardPerBlock = 761000 gwei;\n\n        // init batch state, default starts from 1\n        curBatchState = BatchState({\n            id: 1,\n            number: block.number,\n            startEpoch: 0,\n            endEpoch: 0\n        });\n\n        escrow = ILockingInfo(_escrow);\n\n        signerUpdateThrottle = 1;\n\n        __Pausable_init();\n        __LockingBadge_init();\n    }\n\n    /**\n     * @dev currentBatch returns current batch id\n     */\n    function currentBatch() external view returns (uint256) {\n        return curBatchState.id;\n    }\n\n    /**\n     * @dev WITHDRAWAL_DELAY returns the period\n     *      just for compatibility, this ambiguous func is added\n     */\n    function WITHDRAWAL_DELAY() external view returns (uint256) {\n        return exitDelayPeriod;\n    }\n\n    /**\n     * @dev BLOCK_REWARD returns the current reward per block\n     *      just for compatibility, this ambiguous func is added\n     */\n    function BLOCK_REWARD() external view returns (uint256) {\n        return rewardPerBlock;\n    }\n\n    /**\n     * @dev updateMpc update the mpc address\n     * @param _newMpc new mpc address\n     */\n    function updateMpc(address _newMpc) external onlyOwner {\n        mpcAddress = _newMpc;\n        emit UpdateMpc(_newMpc);\n    }\n\n    /**\n     * @dev setPause\n     * @param _yes pause or not\n     */\n    function setPause(bool _yes) external onlyOwner {\n        if (_yes) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /**\n     *  @dev updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.\n     *  @param _time new withdraw delay time\n     */\n    function updateWithdrawDelayTimeValue(uint256 _time) external onlyOwner {\n        require(_time > 0, \"dalayTime==0\");\n        uint256 pre = exitDelayPeriod;\n        exitDelayPeriod = _time;\n        emit WithrawDelayTimeChange(_time, pre);\n    }\n\n    /**\n     * @dev updateBlockReward  Allow owner to set per block reward\n     * @param newReward the block reward\n     */\n    function updateBlockReward(uint256 newReward) external onlyOwner {\n        require(newReward != 0, \"invalid newReward\");\n        uint256 pre = rewardPerBlock;\n        rewardPerBlock = newReward;\n        emit RewardUpdate(newReward, pre);\n    }\n\n    /**\n     * @dev setSignerUpdateThrottle  set signerUpdateThrottle\n     * @param _n the new value of the throttle\n     *        Note: it can be 0\n     */\n    function setSignerUpdateThrottle(uint256 _n) external onlyOwner {\n        signerUpdateThrottle = _n;\n        emit SetSignerUpdateThrottle(_n);\n    }\n\n    /**\n     * @dev updateSigner Allow sqeuencer to update new signers to replace old signer addresses，and NFT holder will be transfer driectly\n     * @param _seqId the sequencer id\n     * @param _signerPubkey the new signer pubkey address\n     */\n    function updateSigner(\n        uint256 _seqId,\n        bytes calldata _signerPubkey\n    ) external whitelistRequired {\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        // can be updated by the signer\n        address signer = seq.signer;\n        if (signer != msg.sender) {\n            revert NotSeqSigner();\n        }\n\n        require(\n            curBatchState.id >= seq.updatedBatch + signerUpdateThrottle,\n            \"signer updating throttle\"\n        );\n\n        address newSigner = _getAddrByPubkey(_signerPubkey);\n        // the new signer should not be a signer before\n        if (seqSigners[newSigner] != 0) {\n            revert SignerExisted();\n        }\n        seq.pubkey = _signerPubkey;\n\n        seq.signer = newSigner;\n        seqSigners[newSigner] = _seqId;\n\n        // the previous signer address can'be used again\n        _invalidSignerAddress(signer);\n\n        // set signer updated batch id\n        seq.updatedBatch = curBatchState.id;\n\n        uint256 nonce = seq.nonce + 1;\n        seq.nonce = nonce;\n        // the event emits in LocingInfo is just for compatibility\n        escrow.logSignerChange(_seqId, signer, newSigner, nonce, _signerPubkey);\n    }\n\n    /**\n     * @dev lockFor lock Metis and participate in the sequencer node\n     *      the msg.sender will be owner of the sequencer\n     *      the owner has abilities to leverage lock/relock/unlock/cliam\n     *      **Note**: the locking amount will be trasnfered from msg.sender\n     *      and you need to approve the Metis of msg.sender to **LockingInfo** contract\n     *      instead of this LockingPool contract\n     *\n     *      the default reward recipient is an empty address\n     *      you need to update it using setSequencerRewardRecipient afterward\n     * @param _signer Sequencer signer address\n     * @param _amount Amount of L1 metis token to lock for.\n     * @param _signerPubkey Sequencer signer pubkey, it should be uncompressed\n     */\n    function lockFor(\n        address _signer,\n        uint256 _amount,\n        bytes calldata _signerPubkey\n    ) external whenNotPaused whitelistRequired {\n        uint256 batchId = curBatchState.id;\n        address owner = msg.sender;\n        uint256 seqId = _lockFor(\n            batchId,\n            owner,\n            _signer,\n            _signerPubkey,\n            _amount,\n            address(0)\n        );\n        escrow.newSequencer(\n            seqId,\n            owner,\n            _signer,\n            _amount,\n            batchId,\n            _signerPubkey\n        );\n        emit SequencerOwnerChanged(seqId, msg.sender);\n        emit SequencerRewardRecipientChanged(seqId, address(0));\n    }\n\n    /**\n     * @dev lockWithRewardRecipient is the same with lockFor, but you can provide a reward receipent\n     * @param _signer Sequencer signer address\n     * @param _rewardRecipient Sequencer reward receiptent\n     *        you can use an empty address if you haven't choosed an address\n     *        and update it using `setSequencerRewardRecipient` after then\n     * @param _amount Amount of L1 metis token to lock for.\n     * @param _signerPubkey Sequencer signer pubkey\n     *         it should be uncompressed and matched with signer address\n     */\n    function lockWithRewardRecipient(\n        address _signer,\n        address _rewardRecipient,\n        uint256 _amount,\n        bytes calldata _signerPubkey\n    ) external whenNotPaused whitelistRequired {\n        uint256 batchId = curBatchState.id;\n        uint256 seqId = _lockFor(\n            batchId,\n            msg.sender,\n            _signer,\n            _signerPubkey,\n            _amount,\n            _rewardRecipient\n        );\n        escrow.newSequencer(\n            seqId,\n            msg.sender,\n            _signer,\n            _amount,\n            batchId,\n            _signerPubkey\n        );\n        emit SequencerOwnerChanged(seqId, msg.sender);\n        emit SequencerRewardRecipientChanged(seqId, _rewardRecipient);\n    }\n\n    /**\n     * @dev relock allow sequencer operator to increase the amount of locked positions\n     * @param _seqId the id of your sequencer\n     * @param _amount amount of token to relock, it can be 0 if you want to relock your rewrad\n     * @param _lockReward use true if lock the current rewards\n     */\n    function relock(\n        uint256 _seqId,\n        uint256 _amount,\n        bool _lockReward\n    ) external whenNotPaused whitelistRequired {\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        if (seq.owner != msg.sender) {\n            revert NotSeqOwner();\n        }\n\n        uint256 _fromReward = 0;\n        if (_lockReward) {\n            _fromReward = seq.reward;\n            seq.reward = 0;\n        }\n\n        uint256 locked = seq.amount + _amount + _fromReward;\n        uint256 nonce = seq.nonce + 1;\n\n        seq.nonce = nonce;\n        seq.amount = locked;\n\n        escrow.increaseLocked(\n            _seqId,\n            nonce,\n            msg.sender,\n            locked,\n            _amount,\n            _fromReward\n        );\n    }\n\n    /**\n     * @dev unlock your metis and exit the sequencer node\n     *      the reward will be arrived by L1Bridge first\n     *      and you need to wait the exit period and call\n     *      unlockClaim to cliam your locked token\n     * @param _seqId sequencer id\n     * @param _l2Gas the L2 gas limit for L1Bridge.\n     *       the reward is distributed by bridge\n     *       so you need to pay the ETH as the bridge fee\n     */\n    function unlock(\n        uint256 _seqId,\n        uint32 _l2Gas\n    ) external payable whenNotPaused whitelistRequired {\n        _unlock(_seqId, false, _l2Gas);\n    }\n\n    /**\n     * @dev forceUnlock Allow owner to force a sequencer node to exit\n     * @param _seqId the sequencer id\n     * @param _l2Gas l2 gas limit, see above for the detail\n     */\n    function forceUnlock(\n        uint256 _seqId,\n        uint32 _l2Gas\n    ) external payable onlyOwner {\n        _unlock(_seqId, true, _l2Gas);\n    }\n\n    /**\n     * @dev unlockClaim claim your locked tokens after the waiting period is passed\n     *      l2 fee is required if you have unclaimed reward\n     *\n     * @param _seqId sequencer id\n     * @param _l2Gas l2 gas limit\n     */\n    function unlockClaim(\n        uint256 _seqId,\n        uint32 _l2Gas\n    ) external payable whenNotPaused whitelistRequired {\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.owner != msg.sender) {\n            revert NotSeqOwner();\n        }\n\n        address recipient = seq.rewardRecipient;\n        if (recipient == address(0)) {\n            revert NoRewardRecipient();\n        }\n\n        // operator can only claim after WITHDRAWAL_DELAY\n        require(\n            seq.status == Status.Inactive &&\n                seq.unlockClaimTime <= block.timestamp,\n            \"Not allowed to cliam\"\n        );\n\n        uint256 amount = seq.amount;\n        uint256 reward = seq.reward;\n\n        seq.amount = 0;\n        seq.reward = 0;\n        seq.nonce++;\n        seq.status = Status.Unlocked;\n        seqStatuses[Status.Inactive]--;\n        seqStatuses[Status.Unlocked]++;\n\n        delete seqOwners[seq.owner];\n\n        // invalid it\n        _invalidSignerAddress(seq.signer);\n\n        escrow.finalizeUnlock{value: msg.value}(\n            msg.sender,\n            _seqId,\n            amount,\n            reward,\n            recipient,\n            _l2Gas\n        );\n    }\n\n    /**\n     * @dev withdrawRewards withdraw current rewards\n     *      l2 fee is required\n     *\n     * @param _seqId unique integer to identify a sequencer.\n     * @param _l2Gas bridge reward to L2 gasLimit\n     */\n    function withdrawRewards(\n        uint256 _seqId,\n        uint32 _l2Gas\n    ) external payable whenNotPaused whitelistRequired {\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        if (seq.owner != msg.sender) {\n            revert NotSeqOwner();\n        }\n\n        address recipient = seq.rewardRecipient;\n        if (recipient == address(0)) {\n            revert NoRewardRecipient();\n        }\n        uint256 reward = seq.reward;\n        if (reward > 0) {\n            seq.reward = 0;\n            escrow.liquidateReward{value: msg.value}(\n                _seqId,\n                reward,\n                recipient,\n                _l2Gas\n            );\n        }\n    }\n\n    /**\n     * @dev batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution\n     * @param _batchId The batchId that submitted the reward is that\n     * @param _startEpoch The startEpoch that submitted the reward is that\n     * @param _endEpoch The endEpoch that submitted the reward is that\n     * @param _seqs Those sequencers can receive rewards\n     * @param _blocks How many blocks each sequencer finished.\n     */\n    function batchSubmitRewards(\n        uint256 _batchId,\n        uint256 _startEpoch,\n        uint256 _endEpoch,\n        address[] calldata _seqs,\n        uint256[] calldata _blocks\n    ) external {\n        require(msg.sender == mpcAddress, \"not MPC\");\n        require(\n            _seqs.length == _blocks.length && _seqs.length > 0,\n            \"mismatch length\"\n        );\n\n        BatchState storage bs = curBatchState;\n        uint256 nextBatch = bs.id + 1;\n        require(nextBatch == _batchId, \"invalid batch id\");\n        bs.id = nextBatch;\n\n        require(bs.endEpoch + 1 == _startEpoch, \"invalid startEpoch\");\n        require(_startEpoch < _endEpoch, \"invalid endEpoch\");\n\n        uint256 rpb = rewardPerBlock;\n        uint256 totalReward = 0;\n        for (uint256 i = 0; i < _seqs.length; i++) {\n            uint256 reward = _blocks[i] * rpb;\n            uint256 seqId = seqSigners[_seqs[i]];\n            Sequencer storage seq = sequencers[seqId];\n            if (seq.status == Status.Unavailabe) {\n                revert NoSuchSeq();\n            }\n            seq.reward += reward;\n            totalReward += reward;\n        }\n        bs.number = block.number;\n        bs.startEpoch = _startEpoch;\n        bs.endEpoch = _endEpoch;\n        escrow.distributeReward(_batchId, totalReward);\n        emit DistributeReward(\n            _batchId,\n            _startEpoch,\n            _endEpoch,\n            totalReward,\n            rpb\n        );\n    }\n\n    function _unlock(uint256 _seqId, bool _force, uint32 _l2Gas) internal {\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        uint256 actived = --seqStatuses[Status.Active];\n        uint256 inactived = ++seqStatuses[Status.Inactive];\n\n        if (!_force) {\n            if (seq.owner != msg.sender) {\n                revert NotSeqOwner();\n            }\n\n            // BFT check, actived sequencer count must be high than 2/3 of total\n            if (inactived * 3 > actived + inactived) {\n                revert(\"BFT restriction\");\n            }\n        }\n\n        address recipient = seq.rewardRecipient;\n        if (recipient == address(0)) {\n            revert NoRewardRecipient();\n        }\n\n        seq.status = Status.Inactive;\n        seq.deactivationBatch = curBatchState.id;\n        seq.deactivationTime = block.timestamp;\n        seq.unlockClaimTime = block.timestamp + exitDelayPeriod;\n        seq.nonce++;\n\n        uint256 unclaimed = seq.reward;\n        seq.reward = 0;\n\n        escrow.initializeUnlock{value: msg.value}(\n            _seqId,\n            unclaimed,\n            _l2Gas,\n            seq\n        );\n    }\n}\n"
    },
    "contracts/SequencerInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {ISequencerInfo} from \"./interfaces/ISequencerInfo.sol\";\n\ncontract SequencerInfo is OwnableUpgradeable, ISequencerInfo {\n    uint256 public totalSequencers;\n\n    // whitelist\n    mapping(address owner => bool yes) public whitelist;\n\n    // sequencerId => sequencer\n    mapping(uint256 seqId => Sequencer _seq) public sequencers;\n\n    // sequencer owner address => sequencerId\n    // Note: sequencerId starts from 1\n    // sequencer does not exist if the seqId is 0\n    mapping(address owner => uint256 seqId) public seqOwners;\n\n    // sequencer signer address => sequencerId\n    // the signer can't be reused afterward if the sequencer exits or updates its pubkey\n    // It means that the signer is invalid if the seqId is type(uint256).max\n    mapping(address signer => uint256 seqId) public seqSigners;\n\n    // sequencer status => count\n    mapping(Status status => uint256 count) public seqStatuses;\n\n    /**\n     * @dev Modifier to make a function callable only the msg.sender is in the whitelist.\n     */\n    modifier whitelistRequired() {\n        if (!whitelist[msg.sender]) {\n            revert NotWhitelisted();\n        }\n        _;\n    }\n\n    function __LockingBadge_init() internal {\n        __Ownable_init();\n    }\n\n    /**\n     * @dev setWhitelist Allow owner to update white address list\n     * @param _addr the address who can lock token\n     * @param _yes white address state\n     */\n    function setWhitelist(address _addr, bool _yes) external onlyOwner {\n        whitelist[_addr] = _yes;\n        emit SetWhitelist(_addr, _yes);\n    }\n\n    /**\n     * @dev setSequencerRewardRecipient Allow sequencer owner to set a reward recipient\n     * @param _seqId The sequencerId\n     * @param _recipient Who will receive the reward token\n     */\n    function setSequencerRewardRecipient(\n        uint256 _seqId,\n        address _recipient\n    ) external whitelistRequired {\n        Sequencer storage seq = sequencers[_seqId];\n\n        if (seq.owner != msg.sender) {\n            revert NotSeqOwner();\n        }\n\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        if (_recipient == address(0)) {\n            revert NullAddress();\n        }\n\n        seq.rewardRecipient = _recipient;\n        emit SequencerRewardRecipientChanged(_seqId, _recipient);\n    }\n\n    /**\n     * @dev setSequencerOwner update sequencer owner\n     * @param _seqId The sequencerId\n     * @param _owner the new owner\n     */\n    function setSequencerOwner(\n        uint256 _seqId,\n        address _owner\n    ) external whitelistRequired {\n        if (_owner == address(0)) {\n            revert NullAddress();\n        }\n\n        Sequencer storage seq = sequencers[_seqId];\n        if (seq.status != Status.Active) {\n            revert SeqNotActive();\n        }\n\n        address owner = seq.owner;\n        if (owner != msg.sender) {\n            revert NotSeqOwner();\n        }\n        seq.owner = _owner;\n        delete seqOwners[owner];\n        seqOwners[_owner] = _seqId;\n        emit SequencerOwnerChanged(_seqId, _owner);\n    }\n\n    function _lockFor(\n        uint256 _batchId,\n        address _owner,\n        address _signer,\n        bytes calldata _signerPubkey,\n        uint256 _amount,\n        address _rewardRecipient\n    ) internal returns (uint256 _seqId) {\n        // it will check the _signer must not be empty address\n        require(\n            _getAddrByPubkey(_signerPubkey) == _signer,\n            \"pubkey and address mismatch\"\n        );\n\n        if (seqOwners[_owner] != 0) {\n            revert OwnedSequencer();\n        }\n\n        if (seqSigners[_signer] != 0) {\n            revert SignerExisted();\n        }\n\n        uint256 seqs = totalSequencers;\n\n        // seqId starts from 1\n        _seqId = seqs + 1;\n\n        seqOwners[_owner] = _seqId;\n        seqSigners[_signer] = _seqId;\n        seqStatuses[Status.Active]++;\n        totalSequencers = _seqId;\n\n        sequencers[_seqId] = Sequencer({\n            amount: _amount,\n            reward: 0,\n            activationBatch: _batchId,\n            deactivationBatch: 0,\n            updatedBatch: _batchId,\n            deactivationTime: 0,\n            unlockClaimTime: 0,\n            nonce: 1,\n            owner: msg.sender,\n            signer: _signer,\n            pubkey: _signerPubkey,\n            rewardRecipient: _rewardRecipient,\n            status: Status.Active\n        });\n        return _seqId;\n    }\n\n    function _getAddrByPubkey(\n        bytes calldata _signerPubkey\n    ) internal pure returns (address) {\n        require(_signerPubkey.length == 64, \"invalid pubkey\");\n        address newSigner = address(uint160(uint256(keccak256(_signerPubkey))));\n        require(newSigner != address(0), \"empty address\");\n        return newSigner;\n    }\n\n    function _invalidSignerAddress(address _signer) internal {\n        seqSigners[_signer] = type(uint256).max;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/test/TestBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IL1ERC20Bridge} from \"../interfaces/IL1ERC20Bridge.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract TestBridge is IL1ERC20Bridge {\n    event ERC20DepositInitiated(\n        address indexed _l1Token,\n        address indexed _l2Token,\n        address indexed _from,\n        address _to,\n        uint256 _amount,\n        bytes _data\n    );\n\n    mapping(address addr => uint256 balance) public l2Balances;\n\n    function depositERC20ToByChainId(\n        uint256,\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32,\n        bytes calldata _data\n    ) external payable override {\n        require(msg.value > 0, \"bridge fee required\");\n        IERC20(_l1Token).transferFrom(msg.sender, address(this), _amount);\n        l2Balances[_to] += _amount;\n\n        emit ERC20DepositInitiated(\n            _l1Token,\n            _l2Token,\n            msg.sender,\n            _to,\n            _amount,\n            _data\n        );\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    constructor(uint256 amountToMint) ERC20(\"Test ERC20\", \"TEST\") {\n        mint(msg.sender, amountToMint);\n    }\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "evmVersion": "shanghai",
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}