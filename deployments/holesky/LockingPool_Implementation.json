{
  "address": "0xb60aD54FE96A2951ba010fd1016A54DD5a862f51",
  "abi": [
    {
      "inputs": [],
      "name": "NoRewardRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSuchSeq",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSeqOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSeqSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnedSequencer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeqNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignerExisted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rpb",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReward",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "SequencerOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "SequencerRewardRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "SetSignerUpdateThrottle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_yes",
          "type": "bool"
        }
      ],
      "name": "SetWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMpc",
          "type": "address"
        }
      ],
      "name": "UpdateMpc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cur",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_prev",
          "type": "uint256"
        }
      ],
      "name": "WithrawDelayTimeChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCK_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_seqs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blocks",
          "type": "uint256[]"
        }
      ],
      "name": "batchSubmitRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curBatchState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract ILockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitDelayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "forceUnlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "lockWithRewardRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_lockReward",
          "type": "bool"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "seqOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "seqId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "seqSigners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "seqId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ISequencerInfo.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "seqStatuses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seqId",
          "type": "uint256"
        }
      ],
      "name": "sequencers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activationBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deactivationBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deactivationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "enum ISequencerInfo.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_yes",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setSequencerOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setSequencerRewardRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "setSignerUpdateThrottle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_yes",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerUpdateThrottle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSequencers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "updateBlockReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMpc",
          "type": "address"
        }
      ],
      "name": "updateMpc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubkey",
          "type": "bytes"
        }
      ],
      "name": "updateSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawDelayTimeValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seqId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2be0a56b4f12abc7514f90327ebef3b648b38cda182b44d75aab137b75f58862",
  "receipt": {
    "to": null,
    "from": "0x0000001aB69b564959DAeF0F6dcd206dB0ACDc78",
    "contractAddress": "0xb60aD54FE96A2951ba010fd1016A54DD5a862f51",
    "transactionIndex": 33,
    "gasUsed": "2701783",
    "logsBloom": "0x
    "blockHash": "0x6494438e3517be6932d772861d35ada728a245819ad4c0b07d99f442b84f5562",
    "transactionHash": "0x2be0a56b4f12abc7514f90327ebef3b648b38cda182b44d75aab137b75f58862",
    "logs": [],
    "blockNumber": 1061016,
    "cumulativeGasUsed": "7112623",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a7066b62d74fa750e9b4facf3b5136ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NoRewardRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSuchSeq\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSeqOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSeqSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedSequencer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeqNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rpb\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"SequencerOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"SequencerRewardRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"SetSignerUpdateThrottle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_yes\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMpc\",\"type\":\"address\"}],\"name\":\"UpdateMpc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cur\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prev\",\"type\":\"uint256\"}],\"name\":\"WithrawDelayTimeChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_seqs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blocks\",\"type\":\"uint256[]\"}],\"name\":\"batchSubmitRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curBatchState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract ILockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitDelayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"forceUnlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"lockWithRewardRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lockReward\",\"type\":\"bool\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"seqOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seqId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"seqSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seqId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISequencerInfo.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"seqStatuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seqId\",\"type\":\"uint256\"}],\"name\":\"sequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"enum ISequencerInfo.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_yes\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setSequencerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setSequencerRewardRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setSignerUpdateThrottle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_yes\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerUpdateThrottle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSequencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"updateBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMpc\",\"type\":\"address\"}],\"name\":\"updateMpc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawDelayTimeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seqId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DistributeReward(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when rewards are distributed\",\"params\":{\"amount\":\"the total that distributed\",\"batchId\":\"the current batch id\",\"endEpoch\":\"end epoch number\",\"rpb\":\"the current reward per block\",\"startEpoch\":\"start epoch number\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RewardUpdate(uint256,uint256)\":{\"details\":\"Emitted when the proxy update threshold in 'updateBlockReward()'.      Note from maintainer:      for compatibility, this ambiguous event is retained\",\"params\":{\"newReward\":\"new block reward\",\"oldReward\":\"old block reward\"}},\"SequencerOwnerChanged(uint256,address)\":{\"details\":\"Emitted when sequencer owner is changed\",\"params\":{\"_owner\":\"the sequencer owner\",\"_seqId\":\"the sequencerId\"}},\"SequencerRewardRecipientChanged(uint256,address)\":{\"details\":\"Emitted when reward recipient address update in 'setSequencerRewardRecipient'\",\"params\":{\"_recipient\":\"the address receive reward token\",\"_seqId\":\"the sequencerId\"}},\"SetSignerUpdateThrottle(uint256)\":{\"details\":\"Emitted when SignerUpdateThrottle is updated\",\"params\":{\"_n\":\"new min value\"}},\"SetWhitelist(address,bool)\":{\"details\":\"Emitted if owner call 'setWhitelist'\",\"params\":{\"_user\":\"the address who can lock token\",\"_yes\":\"white address state\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"UpdateMpc(address)\":{\"details\":\"Emitted when mpc address update in 'UpdateMpc'\",\"params\":{\"_newMpc\":\"new min lock.\"}},\"WithrawDelayTimeChange(uint256,uint256)\":{\"details\":\"Emitted when WITHDRAWAL_DELAY is updated.\",\"params\":{\"_cur\":\"current withdraw delay time\",\"_prev\":\"previours withdraw delay time\"}}},\"kind\":\"dev\",\"methods\":{\"BLOCK_REWARD()\":{\"details\":\"BLOCK_REWARD returns the current reward per block      just for compatibility, this ambiguous func is added\"},\"WITHDRAWAL_DELAY()\":{\"details\":\"WITHDRAWAL_DELAY returns the period      just for compatibility, this ambiguous func is added\"},\"batchSubmitRewards(uint256,uint256,uint256,address[],uint256[])\":{\"details\":\"batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution\",\"params\":{\"_batchId\":\"The batchId that submitted the reward is that\",\"_blocks\":\"How many blocks each sequencer finished.\",\"_endEpoch\":\"The endEpoch that submitted the reward is that\",\"_seqs\":\"Those sequencers can receive rewards\",\"_startEpoch\":\"The startEpoch that submitted the reward is that\"}},\"currentBatch()\":{\"details\":\"currentBatch returns current batch id\"},\"forceUnlock(uint256,uint32)\":{\"details\":\"forceUnlock Allow owner to force a sequencer node to exit\",\"params\":{\"_l2Gas\":\"l2 gas limit, see above for the detail\",\"_seqId\":\"the sequencer id\"}},\"lockFor(address,uint256,bytes)\":{\"details\":\"lockFor lock Metis and participate in the sequencer node      the msg.sender will be owner of the sequencer      the owner has abilities to leverage lock/relock/unlock/cliam      **Note**: the locking amount will be trasnfered from msg.sender      and you need to approve the Metis of msg.sender to **LockingInfo** contract      instead of this LockingPool contract      the default reward recipient is an empty address      you need to update it using setSequencerRewardRecipient afterward\",\"params\":{\"_amount\":\"Amount of L1 metis token to lock for.\",\"_signer\":\"Sequencer signer address\",\"_signerPubkey\":\"Sequencer signer pubkey, it should be uncompressed\"}},\"lockWithRewardRecipient(address,address,uint256,bytes)\":{\"details\":\"lockWithRewardRecipient is the same with lockFor, but you can provide a reward receipent\",\"params\":{\"_amount\":\"Amount of L1 metis token to lock for.\",\"_rewardRecipient\":\"Sequencer reward receiptent        you can use an empty address if you haven't choosed an address        and update it using `setSequencerRewardRecipient` after then\",\"_signer\":\"Sequencer signer address\",\"_signerPubkey\":\"Sequencer signer pubkey         it should be uncompressed and matched with signer address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relock(uint256,uint256,bool)\":{\"details\":\"relock allow sequencer operator to increase the amount of locked positions\",\"params\":{\"_amount\":\"amount of token to relock, it can be 0 if you want to relock your rewrad\",\"_lockReward\":\"use true if lock the current rewards\",\"_seqId\":\"the id of your sequencer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setPause(bool)\":{\"details\":\"setPause\",\"params\":{\"_yes\":\"pause or not\"}},\"setSequencerOwner(uint256,address)\":{\"details\":\"setSequencerOwner update sequencer owner\",\"params\":{\"_owner\":\"the new owner\",\"_seqId\":\"The sequencerId\"}},\"setSequencerRewardRecipient(uint256,address)\":{\"details\":\"setSequencerRewardRecipient Allow sequencer owner to set a reward recipient\",\"params\":{\"_recipient\":\"Who will receive the reward token\",\"_seqId\":\"The sequencerId\"}},\"setSignerUpdateThrottle(uint256)\":{\"details\":\"setSignerUpdateThrottle  set signerUpdateThrottle\",\"params\":{\"_n\":\"the new value of the throttle        Note: it can be 0\"}},\"setWhitelist(address,bool)\":{\"details\":\"setWhitelist Allow owner to update white address list\",\"params\":{\"_addr\":\"the address who can lock token\",\"_yes\":\"white address state\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint256,uint32)\":{\"details\":\"unlock your metis and exit the sequencer node      the reward will be arrived by L1Bridge first      and you need to wait the exit period and call      unlockClaim to cliam your locked token\",\"params\":{\"_l2Gas\":\"the L2 gas limit for L1Bridge.       the reward is distributed by bridge       so you need to pay the ETH as the bridge fee\",\"_seqId\":\"sequencer id\"}},\"unlockClaim(uint256,uint32)\":{\"details\":\"unlockClaim claim your locked tokens after the waiting period is passed      l2 fee is required if you have unclaimed reward\",\"params\":{\"_l2Gas\":\"l2 gas limit\",\"_seqId\":\"sequencer id\"}},\"updateBlockReward(uint256)\":{\"details\":\"updateBlockReward  Allow owner to set per block reward\",\"params\":{\"newReward\":\"the block reward\"}},\"updateMpc(address)\":{\"details\":\"updateMpc update the mpc address\",\"params\":{\"_newMpc\":\"new mpc address\"}},\"updateSigner(uint256,bytes)\":{\"details\":\"updateSigner Allow sqeuencer to update new signers to replace old signer addresses\\uff0cand NFT holder will be transfer driectly\",\"params\":{\"_seqId\":\"the sequencer id\",\"_signerPubkey\":\"the new signer pubkey address\"}},\"updateWithdrawDelayTimeValue(uint256)\":{\"details\":\"updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.\",\"params\":{\"_time\":\"new withdraw delay time\"}},\"withdrawRewards(uint256,uint32)\":{\"details\":\"withdrawRewards withdraw current rewards      l2 fee is required\",\"params\":{\"_l2Gas\":\"bridge reward to L2 gasLimit\",\"_seqId\":\"unique integer to identify a sequencer.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockingPool.sol\":\"LockingPool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/LockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {ILockingInfo} from \\\"./interfaces/ILockingInfo.sol\\\";\\nimport {ILockingPool} from \\\"./interfaces/ILockingPool.sol\\\";\\n\\nimport {SequencerInfo} from \\\"./SequencerInfo.sol\\\";\\n\\ncontract LockingPool is ILockingPool, PausableUpgradeable, SequencerInfo {\\n    struct BatchState {\\n        uint256 id; // current batch id\\n        uint256 number; // L1 block number when current batch is submitted\\n        uint256 startEpoch; // start epoch number for current batch\\n        uint256 endEpoch; // end epoch number for current batch\\n    }\\n\\n    ILockingInfo public escrow;\\n\\n    // delay time for unlock\\n    uint256 public exitDelayPeriod;\\n\\n    // reward per L2 block\\n    uint256 public rewardPerBlock;\\n\\n    // the mpc address\\n    address public mpcAddress;\\n\\n    // current batch state\\n    BatchState public curBatchState;\\n\\n    // the number of batch that signer can be updated since the last update\\n    uint256 public signerUpdateThrottle;\\n\\n    function initialize(address _escrow) external initializer {\\n        exitDelayPeriod = 21 days;\\n        rewardPerBlock = 761000 gwei;\\n\\n        // init batch state, default starts from 1\\n        curBatchState = BatchState({\\n            id: 1,\\n            number: block.number,\\n            startEpoch: 0,\\n            endEpoch: 0\\n        });\\n\\n        escrow = ILockingInfo(_escrow);\\n\\n        signerUpdateThrottle = 1;\\n\\n        __Pausable_init();\\n        __LockingBadge_init();\\n    }\\n\\n    /**\\n     * @dev currentBatch returns current batch id\\n     */\\n    function currentBatch() external view returns (uint256) {\\n        return curBatchState.id;\\n    }\\n\\n    /**\\n     * @dev WITHDRAWAL_DELAY returns the period\\n     *      just for compatibility, this ambiguous func is added\\n     */\\n    function WITHDRAWAL_DELAY() external view returns (uint256) {\\n        return exitDelayPeriod;\\n    }\\n\\n    /**\\n     * @dev BLOCK_REWARD returns the current reward per block\\n     *      just for compatibility, this ambiguous func is added\\n     */\\n    function BLOCK_REWARD() external view returns (uint256) {\\n        return rewardPerBlock;\\n    }\\n\\n    /**\\n     * @dev updateMpc update the mpc address\\n     * @param _newMpc new mpc address\\n     */\\n    function updateMpc(address _newMpc) external onlyOwner {\\n        mpcAddress = _newMpc;\\n        emit UpdateMpc(_newMpc);\\n    }\\n\\n    /**\\n     * @dev setPause\\n     * @param _yes pause or not\\n     */\\n    function setPause(bool _yes) external onlyOwner {\\n        if (_yes) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /**\\n     *  @dev updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.\\n     *  @param _time new withdraw delay time\\n     */\\n    function updateWithdrawDelayTimeValue(uint256 _time) external onlyOwner {\\n        require(_time > 0, \\\"dalayTime==0\\\");\\n        uint256 pre = exitDelayPeriod;\\n        exitDelayPeriod = _time;\\n        emit WithrawDelayTimeChange(_time, pre);\\n    }\\n\\n    /**\\n     * @dev updateBlockReward  Allow owner to set per block reward\\n     * @param newReward the block reward\\n     */\\n    function updateBlockReward(uint256 newReward) external onlyOwner {\\n        require(newReward != 0, \\\"invalid newReward\\\");\\n        uint256 pre = rewardPerBlock;\\n        rewardPerBlock = newReward;\\n        emit RewardUpdate(newReward, pre);\\n    }\\n\\n    /**\\n     * @dev setSignerUpdateThrottle  set signerUpdateThrottle\\n     * @param _n the new value of the throttle\\n     *        Note: it can be 0\\n     */\\n    function setSignerUpdateThrottle(uint256 _n) external onlyOwner {\\n        signerUpdateThrottle = _n;\\n        emit SetSignerUpdateThrottle(_n);\\n    }\\n\\n    /**\\n     * @dev updateSigner Allow sqeuencer to update new signers to replace old signer addresses\\uff0cand NFT holder will be transfer driectly\\n     * @param _seqId the sequencer id\\n     * @param _signerPubkey the new signer pubkey address\\n     */\\n    function updateSigner(\\n        uint256 _seqId,\\n        bytes calldata _signerPubkey\\n    ) external whitelistRequired {\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        // can be updated by the signer\\n        address signer = seq.signer;\\n        if (signer != msg.sender) {\\n            revert NotSeqSigner();\\n        }\\n\\n        require(\\n            curBatchState.id >= seq.updatedBatch + signerUpdateThrottle,\\n            \\\"signer updating throttle\\\"\\n        );\\n\\n        address newSigner = _getAddrByPubkey(_signerPubkey);\\n        // the new signer should not be a signer before\\n        if (seqSigners[newSigner] != 0) {\\n            revert SignerExisted();\\n        }\\n        seq.pubkey = _signerPubkey;\\n\\n        seq.signer = newSigner;\\n        seqSigners[newSigner] = _seqId;\\n\\n        // the previous signer address can'be used again\\n        _invalidSignerAddress(signer);\\n\\n        // set signer updated batch id\\n        seq.updatedBatch = curBatchState.id;\\n\\n        uint256 nonce = seq.nonce + 1;\\n        seq.nonce = nonce;\\n        // the event emits in LocingInfo is just for compatibility\\n        escrow.logSignerChange(_seqId, signer, newSigner, nonce, _signerPubkey);\\n    }\\n\\n    /**\\n     * @dev lockFor lock Metis and participate in the sequencer node\\n     *      the msg.sender will be owner of the sequencer\\n     *      the owner has abilities to leverage lock/relock/unlock/cliam\\n     *      **Note**: the locking amount will be trasnfered from msg.sender\\n     *      and you need to approve the Metis of msg.sender to **LockingInfo** contract\\n     *      instead of this LockingPool contract\\n     *\\n     *      the default reward recipient is an empty address\\n     *      you need to update it using setSequencerRewardRecipient afterward\\n     * @param _signer Sequencer signer address\\n     * @param _amount Amount of L1 metis token to lock for.\\n     * @param _signerPubkey Sequencer signer pubkey, it should be uncompressed\\n     */\\n    function lockFor(\\n        address _signer,\\n        uint256 _amount,\\n        bytes calldata _signerPubkey\\n    ) external whenNotPaused whitelistRequired {\\n        uint256 batchId = curBatchState.id;\\n        address owner = msg.sender;\\n        uint256 seqId = _lockFor(\\n            batchId,\\n            owner,\\n            _signer,\\n            _signerPubkey,\\n            _amount,\\n            address(0)\\n        );\\n        escrow.newSequencer(\\n            seqId,\\n            owner,\\n            _signer,\\n            _amount,\\n            batchId,\\n            _signerPubkey\\n        );\\n        emit SequencerOwnerChanged(seqId, msg.sender);\\n        emit SequencerRewardRecipientChanged(seqId, address(0));\\n    }\\n\\n    /**\\n     * @dev lockWithRewardRecipient is the same with lockFor, but you can provide a reward receipent\\n     * @param _signer Sequencer signer address\\n     * @param _rewardRecipient Sequencer reward receiptent\\n     *        you can use an empty address if you haven't choosed an address\\n     *        and update it using `setSequencerRewardRecipient` after then\\n     * @param _amount Amount of L1 metis token to lock for.\\n     * @param _signerPubkey Sequencer signer pubkey\\n     *         it should be uncompressed and matched with signer address\\n     */\\n    function lockWithRewardRecipient(\\n        address _signer,\\n        address _rewardRecipient,\\n        uint256 _amount,\\n        bytes calldata _signerPubkey\\n    ) external whenNotPaused whitelistRequired {\\n        uint256 batchId = curBatchState.id;\\n        uint256 seqId = _lockFor(\\n            batchId,\\n            msg.sender,\\n            _signer,\\n            _signerPubkey,\\n            _amount,\\n            _rewardRecipient\\n        );\\n        escrow.newSequencer(\\n            seqId,\\n            msg.sender,\\n            _signer,\\n            _amount,\\n            batchId,\\n            _signerPubkey\\n        );\\n        emit SequencerOwnerChanged(seqId, msg.sender);\\n        emit SequencerRewardRecipientChanged(seqId, _rewardRecipient);\\n    }\\n\\n    /**\\n     * @dev relock allow sequencer operator to increase the amount of locked positions\\n     * @param _seqId the id of your sequencer\\n     * @param _amount amount of token to relock, it can be 0 if you want to relock your rewrad\\n     * @param _lockReward use true if lock the current rewards\\n     */\\n    function relock(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        bool _lockReward\\n    ) external whenNotPaused whitelistRequired {\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        if (seq.owner != msg.sender) {\\n            revert NotSeqOwner();\\n        }\\n\\n        uint256 _fromReward = 0;\\n        if (_lockReward) {\\n            _fromReward = seq.reward;\\n            seq.reward = 0;\\n        }\\n\\n        uint256 locked = seq.amount + _amount + _fromReward;\\n        uint256 nonce = seq.nonce + 1;\\n\\n        seq.nonce = nonce;\\n        seq.amount = locked;\\n\\n        escrow.increaseLocked(\\n            _seqId,\\n            nonce,\\n            msg.sender,\\n            locked,\\n            _amount,\\n            _fromReward\\n        );\\n    }\\n\\n    /**\\n     * @dev unlock your metis and exit the sequencer node\\n     *      the reward will be arrived by L1Bridge first\\n     *      and you need to wait the exit period and call\\n     *      unlockClaim to cliam your locked token\\n     * @param _seqId sequencer id\\n     * @param _l2Gas the L2 gas limit for L1Bridge.\\n     *       the reward is distributed by bridge\\n     *       so you need to pay the ETH as the bridge fee\\n     */\\n    function unlock(\\n        uint256 _seqId,\\n        uint32 _l2Gas\\n    ) external payable whenNotPaused whitelistRequired {\\n        _unlock(_seqId, false, _l2Gas);\\n    }\\n\\n    /**\\n     * @dev forceUnlock Allow owner to force a sequencer node to exit\\n     * @param _seqId the sequencer id\\n     * @param _l2Gas l2 gas limit, see above for the detail\\n     */\\n    function forceUnlock(\\n        uint256 _seqId,\\n        uint32 _l2Gas\\n    ) external payable onlyOwner {\\n        _unlock(_seqId, true, _l2Gas);\\n    }\\n\\n    /**\\n     * @dev unlockClaim claim your locked tokens after the waiting period is passed\\n     *      l2 fee is required if you have unclaimed reward\\n     *\\n     * @param _seqId sequencer id\\n     * @param _l2Gas l2 gas limit\\n     */\\n    function unlockClaim(\\n        uint256 _seqId,\\n        uint32 _l2Gas\\n    ) external payable whenNotPaused whitelistRequired {\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.owner != msg.sender) {\\n            revert NotSeqOwner();\\n        }\\n\\n        address recipient = seq.rewardRecipient;\\n        if (recipient == address(0)) {\\n            revert NoRewardRecipient();\\n        }\\n\\n        // operator can only claim after WITHDRAWAL_DELAY\\n        require(\\n            seq.status == Status.Inactive &&\\n                seq.unlockClaimTime <= block.timestamp,\\n            \\\"Not allowed to cliam\\\"\\n        );\\n\\n        uint256 amount = seq.amount;\\n        uint256 reward = seq.reward;\\n\\n        seq.amount = 0;\\n        seq.reward = 0;\\n        seq.nonce++;\\n        seq.status = Status.Unlocked;\\n        seqStatuses[Status.Inactive]--;\\n        seqStatuses[Status.Unlocked]++;\\n\\n        delete seqOwners[seq.owner];\\n\\n        // invalid it\\n        _invalidSignerAddress(seq.signer);\\n\\n        escrow.finalizeUnlock{value: msg.value}(\\n            msg.sender,\\n            _seqId,\\n            amount,\\n            reward,\\n            recipient,\\n            _l2Gas\\n        );\\n    }\\n\\n    /**\\n     * @dev withdrawRewards withdraw current rewards\\n     *      l2 fee is required\\n     *\\n     * @param _seqId unique integer to identify a sequencer.\\n     * @param _l2Gas bridge reward to L2 gasLimit\\n     */\\n    function withdrawRewards(\\n        uint256 _seqId,\\n        uint32 _l2Gas\\n    ) external payable whenNotPaused whitelistRequired {\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        if (seq.owner != msg.sender) {\\n            revert NotSeqOwner();\\n        }\\n\\n        address recipient = seq.rewardRecipient;\\n        if (recipient == address(0)) {\\n            revert NoRewardRecipient();\\n        }\\n        uint256 reward = seq.reward;\\n        if (reward > 0) {\\n            seq.reward = 0;\\n            escrow.liquidateReward{value: msg.value}(\\n                _seqId,\\n                reward,\\n                recipient,\\n                _l2Gas\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution\\n     * @param _batchId The batchId that submitted the reward is that\\n     * @param _startEpoch The startEpoch that submitted the reward is that\\n     * @param _endEpoch The endEpoch that submitted the reward is that\\n     * @param _seqs Those sequencers can receive rewards\\n     * @param _blocks How many blocks each sequencer finished.\\n     */\\n    function batchSubmitRewards(\\n        uint256 _batchId,\\n        uint256 _startEpoch,\\n        uint256 _endEpoch,\\n        address[] calldata _seqs,\\n        uint256[] calldata _blocks\\n    ) external returns (uint256 totalReward) {\\n        require(msg.sender == mpcAddress, \\\"not MPC\\\");\\n        require(\\n            _seqs.length == _blocks.length && _seqs.length > 0,\\n            \\\"mismatch length\\\"\\n        );\\n\\n        BatchState storage bs = curBatchState;\\n        uint256 nextBatch = bs.id + 1;\\n        require(nextBatch == _batchId, \\\"invalid batch id\\\");\\n        bs.id = nextBatch;\\n\\n        require(bs.endEpoch + 1 == _startEpoch, \\\"invalid startEpoch\\\");\\n        require(_startEpoch < _endEpoch, \\\"invalid endEpoch\\\");\\n\\n        uint256 rpb = rewardPerBlock;\\n        for (uint256 i = 0; i < _seqs.length; i++) {\\n            uint256 reward = _blocks[i] * rpb;\\n            uint256 seqId = seqSigners[_seqs[i]];\\n            Sequencer storage seq = sequencers[seqId];\\n            if (seq.status == Status.Unavailabe) {\\n                revert NoSuchSeq();\\n            }\\n            seq.reward += reward;\\n            totalReward += reward;\\n        }\\n        bs.number = block.number;\\n        bs.startEpoch = _startEpoch;\\n        bs.endEpoch = _endEpoch;\\n        escrow.distributeReward(_batchId, totalReward);\\n        emit DistributeReward(\\n            _batchId,\\n            _startEpoch,\\n            _endEpoch,\\n            totalReward,\\n            rpb\\n        );\\n    }\\n\\n    function _unlock(uint256 _seqId, bool _force, uint32 _l2Gas) internal {\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        uint256 actived = --seqStatuses[Status.Active];\\n        uint256 inactived = ++seqStatuses[Status.Inactive];\\n\\n        if (!_force) {\\n            if (seq.owner != msg.sender) {\\n                revert NotSeqOwner();\\n            }\\n\\n            // BFT check, actived sequencer count must be high than 2/3 of total\\n            if (inactived * 3 > actived + inactived) {\\n                revert(\\\"BFT restriction\\\");\\n            }\\n        }\\n\\n        address recipient = seq.rewardRecipient;\\n        if (recipient == address(0)) {\\n            revert NoRewardRecipient();\\n        }\\n\\n        seq.status = Status.Inactive;\\n        seq.deactivationBatch = curBatchState.id;\\n        seq.deactivationTime = block.timestamp;\\n        seq.unlockClaimTime = block.timestamp + exitDelayPeriod;\\n        seq.nonce++;\\n\\n        uint256 unclaimed = seq.reward;\\n        seq.reward = 0;\\n\\n        escrow.initializeUnlock{value: msg.value}(\\n            _seqId,\\n            unclaimed,\\n            _l2Gas,\\n            seq\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd83f2c6a9f7753ffbb78ff027d697cee709fb17f8ae25bb8cb8026ef4f10e358\",\"license\":\"MIT\"},\"contracts/SequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ISequencerInfo} from \\\"./interfaces/ISequencerInfo.sol\\\";\\n\\ncontract SequencerInfo is OwnableUpgradeable, ISequencerInfo {\\n    uint256 public totalSequencers;\\n\\n    // whitelist\\n    mapping(address => bool) public whitelist;\\n\\n    // sequencerId => sequencer\\n    mapping(uint256 seqId => Sequencer _seq) public sequencers;\\n\\n    // sequencer owner address => sequencerId\\n    // Note: sequencerId starts from 1\\n    // sequencer does not exist if the seqId is 0\\n    mapping(address owner => uint256 seqId) public seqOwners;\\n\\n    // sequencer signer address => sequencerId\\n    // the signer can't be reused afterward if the sequencer exits or updates its pubkey\\n    // It means that the signer is invalid if the seqId is type(uint256).max\\n    mapping(address signer => uint256 seqId) public seqSigners;\\n\\n    // sequencer status => count\\n    mapping(Status status => uint256 count) public seqStatuses;\\n\\n    /**\\n     * @dev Modifier to make a function callable only the msg.sender is in the whitelist.\\n     */\\n    modifier whitelistRequired() {\\n        if (!whitelist[msg.sender]) {\\n            revert NotWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    function __LockingBadge_init() internal {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @dev setWhitelist Allow owner to update white address list\\n     * @param _addr the address who can lock token\\n     * @param _yes white address state\\n     */\\n    function setWhitelist(address _addr, bool _yes) external onlyOwner {\\n        whitelist[_addr] = _yes;\\n        emit SetWhitelist(_addr, _yes);\\n    }\\n\\n    /**\\n     * @dev setSequencerRewardRecipient Allow sequencer owner to set a reward recipient\\n     * @param _seqId The sequencerId\\n     * @param _recipient Who will receive the reward token\\n     */\\n    function setSequencerRewardRecipient(\\n        uint256 _seqId,\\n        address _recipient\\n    ) external whitelistRequired {\\n        Sequencer storage seq = sequencers[_seqId];\\n\\n        if (seq.owner != msg.sender) {\\n            revert NotSeqOwner();\\n        }\\n\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        if (_recipient == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        seq.rewardRecipient = _recipient;\\n        emit SequencerRewardRecipientChanged(_seqId, _recipient);\\n    }\\n\\n    /**\\n     * @dev setSequencerOwner update sequencer owner\\n     * @param _seqId The sequencerId\\n     * @param _owner the new owner\\n     */\\n    function setSequencerOwner(\\n        uint256 _seqId,\\n        address _owner\\n    ) external whitelistRequired {\\n        if (_owner == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        Sequencer storage seq = sequencers[_seqId];\\n        if (seq.status != Status.Active) {\\n            revert SeqNotActive();\\n        }\\n\\n        address owner = seq.owner;\\n        if (owner != msg.sender) {\\n            revert NotSeqOwner();\\n        }\\n        seq.owner = _owner;\\n        delete seqOwners[owner];\\n        seqOwners[_owner] = _seqId;\\n        emit SequencerOwnerChanged(_seqId, _owner);\\n    }\\n\\n    function _lockFor(\\n        uint256 _batchId,\\n        address _owner,\\n        address _signer,\\n        bytes calldata _signerPubkey,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) internal returns (uint256 _seqId) {\\n        // it will check the _signer must not be empty address\\n        require(\\n            _getAddrByPubkey(_signerPubkey) == _signer,\\n            \\\"pubkey and address mismatch\\\"\\n        );\\n\\n        if (seqOwners[_owner] != 0) {\\n            revert OwnedSequencer();\\n        }\\n\\n        if (seqSigners[_signer] != 0) {\\n            revert SignerExisted();\\n        }\\n\\n        uint256 seqs = totalSequencers;\\n\\n        // seqId starts from 1\\n        _seqId = seqs + 1;\\n\\n        seqOwners[_owner] = _seqId;\\n        seqSigners[_signer] = _seqId;\\n        seqStatuses[Status.Active]++;\\n        totalSequencers = _seqId;\\n\\n        sequencers[_seqId] = Sequencer({\\n            amount: _amount,\\n            reward: 0,\\n            activationBatch: _batchId,\\n            deactivationBatch: 0,\\n            updatedBatch: _batchId,\\n            deactivationTime: 0,\\n            unlockClaimTime: 0,\\n            nonce: 1,\\n            owner: msg.sender,\\n            signer: _signer,\\n            pubkey: _signerPubkey,\\n            rewardRecipient: _rewardRecipient,\\n            status: Status.Active\\n        });\\n        return _seqId;\\n    }\\n\\n    function _getAddrByPubkey(\\n        bytes calldata _signerPubkey\\n    ) internal pure returns (address) {\\n        require(_signerPubkey.length == 64, \\\"invalid pubkey\\\");\\n        address newSigner = address(uint160(uint256(keccak256(_signerPubkey))));\\n        require(newSigner != address(0), \\\"empty address\\\");\\n        return newSigner;\\n    }\\n\\n    function _invalidSignerAddress(address _signer) internal {\\n        seqSigners[_signer] = type(uint256).max;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6c6567e00033898b83e3fe5e7d7136faa947407c30b2dc81100fec49cbb5ce45\",\"license\":\"MIT\"},\"contracts/interfaces/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amoun in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     *\\n     *      Note from maintainer:\\n     *      for compatibility, the event is retained\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa2ab5f8756a9e2ca91573dfd7584cc481a0b108d3eea0f522ecdbf926687dd6f\",\"license\":\"MIT\"},\"contracts/interfaces/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.24;\\n\\ninterface ILockingPool {\\n    /**\\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\\n     * @param _cur current withdraw delay time\\n     * @param _prev previours withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     *      Note from maintainer:\\n     *      for compatibility, this ambiguous event is retained\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when SignerUpdateThrottle is updated\\n     * @param _n new min value\\n     */\\n    event SetSignerUpdateThrottle(uint256 _n);\\n\\n    /**\\n     * @dev Emitted when rewards are distributed\\n     * @param batchId the current batch id\\n     * @param startEpoch start epoch number\\n     * @param endEpoch end epoch number\\n     * @param amount the total that distributed\\n     * @param rpb the current reward per block\\n     */\\n    event DistributeReward(\\n        uint256 indexed batchId,\\n        uint256 startEpoch,\\n        uint256 endEpoch,\\n        uint256 amount,\\n        uint256 rpb\\n    );\\n}\\n\",\"keccak256\":\"0xa71b9bfb44aba3a56799bf4312da5b1267a0b6aca071297cef5afbed64e75375\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\\n\",\"keccak256\":\"0x78c250ff49c057e76e1c79aa078bf60d3050ee7a3b2e8cd9fc6d509856d573d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50612fe88061001d5f395ff3fe60806040526004361061025d575f3560e01c80638ddc74de1161014b578063c4d66de8116100c6578063d83b0e141161007c578063f2fde38b11610062578063f2fde38b14610695578063f41a9642146106b4578063f580ffcb146106d3575f80fd5b8063d83b0e1414610657578063e2fdcc1714610676575f80fd5b8063ca99e838116100ac578063ca99e83814610610578063cc3ab92314610623578063d11d068114610638575f80fd5b8063c4d66de8146105dc578063c65066d4146105fb575f80fd5b8063af70cba51161011b578063beb2675511610101578063beb2675514610573578063bedb86fb1461059e578063bfd6fc3f146105bd575f80fd5b8063af70cba514610512578063b447297014610531575f80fd5b80638ddc74de146104935780639ad42030146104a65780639b19251a146104c5578063a953791f146104f3575f80fd5b80635c975abb116101db57806376cd940e116101ab57806386d203ab1161019157806386d203ab146104365780638ae39cac146104615780638da5cb5b14610476575f80fd5b806376cd940e1461040e5780637f05b9ef14610422575f80fd5b80635c975abb146103805780636ba7ccff146103a3578063715018a6146103db57806371e10cfa146103ef575f80fd5b8063169abefc11610230578063262c0e6611610216578063262c0e66146103395780633478874b1461034c57806353d6fd5914610361575f80fd5b8063169abefc146102fb5780631739668714610326575f80fd5b8063015bb180146102615780630ebb172a14610282578063111f4630146102a557806311c7d144146102dc575b5f80fd5b34801561026c575f80fd5b5061028061027b3660046126c8565b6106f2565b005b34801561028d575f80fd5b5060d0545b6040519081526020015b60405180910390f35b3480156102b0575f80fd5b5060d2546102c4906001600160a01b031681565b6040516001600160a01b03909116815260200161029c565b3480156102e7575f80fd5b506102926102f6366004612742565b610875565b348015610306575f80fd5b506102926103153660046127de565b609a6020525f908152604090205481565b6102806103343660046127fe565b610c0d565b6102806103473660046127fe565b610d7a565b348015610357575f80fd5b5061029260d05481565b34801561036c575f80fd5b5061028061037b366004612834565b610dc0565b34801561038b575f80fd5b5060335460ff165b604051901515815260200161029c565b3480156103ae575f80fd5b506103c26103bd366004612865565b610e2b565b60405161029c9d9c9b9a999897969594939291906128b0565b3480156103e6575f80fd5b50610280610f34565b3480156103fa575f80fd5b50610280610409366004612865565b610f47565b348015610419575f80fd5b5060d354610292565b34801561042d575f80fd5b5060d154610292565b348015610441575f80fd5b50610292610450366004612982565b609c6020525f908152604090205481565b34801561046c575f80fd5b5061029260d15481565b348015610481575f80fd5b506065546001600160a01b03166102c4565b6102806104a13660046127fe565b610fdc565b3480156104b1575f80fd5b506102806104c03660046129de565b61126f565b3480156104d0575f80fd5b506103936104df3660046127de565b60986020525f908152604090205460ff1681565b3480156104fe575f80fd5b5061028061050d366004612a48565b6113a7565b34801561051d575f80fd5b5061028061052c366004612a69565b6114f6565b34801561053c575f80fd5b5060d35460d45460d55460d6546105539392919084565b60408051948552602085019390935291830152606082015260800161029c565b34801561057e575f80fd5b5061029261058d3660046127de565b609b6020525f908152604090205481565b3480156105a9575f80fd5b506102806105b8366004612abf565b611619565b3480156105c8575f80fd5b506102806105d7366004612865565b61163a565b3480156105e7575f80fd5b506102806105f63660046127de565b61167e565b348015610606575f80fd5b5061029260d75481565b61028061061e3660046127fe565b611805565b34801561062e575f80fd5b5061029260975481565b348015610643575f80fd5b506102806106523660046127de565b611819565b348015610662575f80fd5b50610280610671366004612a48565b61186f565b348015610681575f80fd5b5060cf546102c4906001600160a01b031681565b3480156106a0575f80fd5b506102806106af3660046127de565b61199e565b3480156106bf575f80fd5b506102806106ce366004612ad8565b611a2b565b3480156106de575f80fd5b506102806106ed366004612865565b611c24565b6106fa611cb9565b335f9081526098602052604090205460ff1661072957604051630b094f2760e31b815260040160405180910390fd5b5f8381526099602052604090206002600b820154600160a01b900460ff1660038111156107585761075861287c565b146107765760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b031633146107a35760405163a91da8ff60e01b815260040160405180910390fd5b5f82156107b657506001810180545f9091555b5f8185845f01546107c79190612b34565b6107d19190612b34565b90505f836007015460016107e59190612b34565b6007850181905582855560cf546040516309a12e3b60e21b8152600481018a905260248101839052336044820152606481018590526084810189905260a481018690529192506001600160a01b031690632684b8ec9060c4015b5f604051808303815f87803b158015610856575f80fd5b505af1158015610868573d5f803e3d5ffd5b5050505050505050505050565b60d2545f906001600160a01b031633146108d65760405162461bcd60e51b815260206004820152600760248201527f6e6f74204d50430000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b83821480156108e457508315155b6109305760405162461bcd60e51b815260206004820152600f60248201527f6d69736d61746368206c656e677468000000000000000000000000000000000060448201526064016108cd565b60d380545f90610941906001612b34565b90508981146109925760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642062617463682069640000000000000000000000000000000060448201526064016108cd565b808255600382015489906109a7906001612b34565b146109f45760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420737461727445706f6368000000000000000000000000000060448201526064016108cd565b878910610a435760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420656e6445706f63680000000000000000000000000000000060448201526064016108cd565b60d1545f5b87811015610b40575f82888884818110610a6457610a64612b47565b90506020020135610a759190612b5b565b90505f609b5f8c8c86818110610a8d57610a8d612b47565b9050602002016020810190610aa291906127de565b6001600160a01b0316815260208082019290925260409081015f908120548082526099909352908120919250600b820154600160a01b900460ff166003811115610aee57610aee61287c565b03610b0c576040516317876d5f60e11b815260040160405180910390fd5b82816001015f828254610b1f9190612b34565b90915550610b2f90508389612b34565b97505060019092019150610a489050565b50436001840155600283018a90556003830189905560cf546040516338ef349f60e21b8152600481018d9052602481018690526001600160a01b039091169063e3bcd27c906044015f604051808303815f87803b158015610b9f575f80fd5b505af1158015610bb1573d5f803e3d5ffd5b5050604080518d8152602081018d9052908101879052606081018490528d92507f57f14bf0f24025b2c737413d121021e1a6ede039533e1215eda6f20002baf0a1915060800160405180910390a2505050979650505050505050565b610c15611cb9565b335f9081526098602052604090205460ff16610c4457604051630b094f2760e31b815260040160405180910390fd5b5f8281526099602052604090206002600b820154600160a01b900460ff166003811115610c7357610c7361287c565b14610c915760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b03163314610cbe5760405163a91da8ff60e01b815260040160405180910390fd5b600b8101546001600160a01b031680610cea5760405163313f077360e21b815260040160405180910390fd5b60018201548015610d73575f600184015560cf54604051630baf0f1560e31b815260048101879052602481018390526001600160a01b03848116604483015263ffffffff8716606483015290911690635d7878a89034906084015f604051808303818588803b158015610d5b575f80fd5b505af1158015610d6d573d5f803e3d5ffd5b50505050505b5050505050565b610d82611cb9565b335f9081526098602052604090205460ff16610db157604051630b094f2760e31b815260040160405180910390fd5b610dbc825f83611d0c565b5050565b610dc8611f63565b6001600160a01b0382165f81815260986020908152604091829020805460ff19168515159081179091558251938452908301527ff6019ec0a78d156d249a1ec7579e2321f6ac7521d6e1d2eacf90ba4a184dcceb91015b60405180910390a15050565b60996020525f9081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0180549a9b999a9899979896979596949593946001600160a01b03938416949290931692610e9790612b72565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec390612b72565b8015610f0e5780601f10610ee557610100808354040283529160200191610f0e565b820191905f5260205f20905b815481529060010190602001808311610ef157829003601f168201915b505050600b90930154919250506001600160a01b0381169060ff600160a01b909104168d565b610f3c611f63565b610f455f611fbd565b565b610f4f611f63565b5f8111610f9e5760405162461bcd60e51b815260206004820152600c60248201527f64616c617954696d653d3d30000000000000000000000000000000000000000060448201526064016108cd565b60d080549082905560408051838152602081018390527f08cb0bf599c925a6240976039d9d4d3201d88d2ba83703b890049356cdbb67e69101610e1f565b610fe4611cb9565b335f9081526098602052604090205460ff1661101357604051630b094f2760e31b815260040160405180910390fd5b5f82815260996020526040902060088101546001600160a01b0316331461104d5760405163a91da8ff60e01b815260040160405180910390fd5b600b8101546001600160a01b0316806110795760405163313f077360e21b815260040160405180910390fd5b6001600b830154600160a01b900460ff16600381111561109b5761109b61287c565b1480156110ac575042826006015411155b6110f85760405162461bcd60e51b815260206004820152601460248201527f4e6f7420616c6c6f77656420746f20636c69616d00000000000000000000000060448201526064016108cd565b81546001830180545f80865591829055600785018054919261111983612baa565b9091555050600b8401805460ff60a01b19167403000000000000000000000000000000000000000017905560015f908152609c6020527f759fbb3c7535ea6cd791a268d7e54d5bf43408007315741bf51b70650b77f6a580549161117c83612bc2565b909155505060035f908152609c6020527fa166308694002ada49a080be065b41ffb107f08c6cd338f4ec60e54116d066b78054916111b983612baa565b909155505060088401546001600160a01b039081165f908152609a6020526040812055600985015461120291166001600160a01b03165f908152609b602052604090205f199055565b60cf54604051632947689560e11b81523360048201526024810188905260448101849052606481018390526001600160a01b03858116608483015263ffffffff881660a48301529091169063528ed12a90349060c4015f604051808303818588803b158015610856575f80fd5b611277611cb9565b335f9081526098602052604090205460ff166112a657604051630b094f2760e31b815260040160405180910390fd5b60d3545f6112b982338987878a8c61200e565b60cf54604051631badded560e01b81529192506001600160a01b031690631badded5906112f690849033908c908b9089908c908c90600401612bff565b5f604051808303815f87803b15801561130d575f80fd5b505af115801561131f573d5f803e3d5ffd5b5050604080518481523360208201527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac935001905060405180910390a1604080518281526001600160a01b03881660208201527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb691015b60405180910390a150505050505050565b335f9081526098602052604090205460ff166113d657604051630b094f2760e31b815260040160405180910390fd5b6001600160a01b0381166113fd5760405163e99d5ac560e01b815260040160405180910390fd5b5f8281526099602052604090206002600b820154600160a01b900460ff16600381111561142c5761142c61287c565b1461144a5760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b03163381146114785760405163a91da8ff60e01b815260040160405180910390fd5b6008820180546001600160a01b0319166001600160a01b038581169182179092559082165f908152609a60209081526040808320839055838352918290208790558151878152908101929092527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac910160405180910390a150505050565b6114fe611cb9565b335f9081526098602052604090205460ff1661152d57604051630b094f2760e31b815260040160405180910390fd5b60d354335f61154183838988888b8761200e565b60cf54604051631badded560e01b81529192506001600160a01b031690631badded59061157e90849086908c908c908a908d908d90600401612bff565b5f604051808303815f87803b158015611595575f80fd5b505af11580156115a7573d5f803e3d5ffd5b5050604080518481523360208201527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac935001905060405180910390a1604080518281525f60208201527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb69101611396565b611621611f63565b80156116325761162f612333565b50565b61162f61238d565b611642611f63565b60d78190556040518181527fe58685f6b78e6d567d2ed9d7c5efb779c4cd91c63c76763a0e3204a5671f4705906020015b60405180910390a150565b5f54610100900460ff161580801561169c57505f54600160ff909116105b806116b55750303b1580156116b557505f5460ff166001145b6117275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108cd565b5f805460ff191660011790558015611748575f805461ff0019166101001790555b621baf8060d0556602b4201eac900060d15560408051608081018252600180825243602083018190525f938301849052606090920183905260d381905560d49190915560d582905560d69190915560cf80546001600160a01b0319166001600160a01b03851617905560d7556117bc6123c6565b6117c4612438565b8015610dbc575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e1f565b61180d611f63565b610dbc82600183611d0c565b611821611f63565b60d280546001600160a01b0319166001600160a01b0383169081179091556040519081527fc6759872346bc2093e270f2fa00d99d7bcdde60a410a3e9956b34196d42fee7690602001611673565b335f9081526098602052604090205460ff1661189e57604051630b094f2760e31b815260040160405180910390fd5b5f82815260996020526040902060088101546001600160a01b031633146118d85760405163a91da8ff60e01b815260040160405180910390fd5b6002600b820154600160a01b900460ff1660038111156118fa576118fa61287c565b146119185760405163c494657160e01b815260040160405180910390fd5b6001600160a01b03821661193f5760405163e99d5ac560e01b815260040160405180910390fd5b600b810180546001600160a01b0319166001600160a01b0384169081179091556040805185815260208101929092527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb6910160405180910390a1505050565b6119a6611f63565b6001600160a01b038116611a225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108cd565b61162f81611fbd565b335f9081526098602052604090205460ff16611a5a57604051630b094f2760e31b815260040160405180910390fd5b5f8381526099602052604090206002600b820154600160a01b900460ff166003811115611a8957611a8961287c565b14611aa75760405163c494657160e01b815260040160405180910390fd5b60098101546001600160a01b0316338114611ad557604051636b95264b60e01b815260040160405180910390fd5b60d7548260030154611ae79190612b34565b60d3541015611b385760405162461bcd60e51b815260206004820152601860248201527f7369676e6572207570646174696e67207468726f74746c65000000000000000060448201526064016108cd565b5f611b438585612440565b6001600160a01b0381165f908152609b602052604090205490915015611b7c5760405163b5013d2b60e01b815260040160405180910390fd5b600a8301611b8b858783612ca7565b506009830180546001600160a01b0319166001600160a01b038381169182179092555f908152609b60205260408082208990559184168152205f19905560d354600384015560078301545f90611be2906001612b34565b6007850181905560cf546040516359942b8160e11b81529192506001600160a01b03169063b32857029061083f908a908790879087908d908d90600401612d61565b611c2c611f63565b805f03611c7b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206e657752657761726400000000000000000000000000000060448201526064016108cd565b60d180549082905560408051838152602081018390527ff67f33e8589d3ea0356303c0f9a8e764873692159f777ff79e4fc523d389dfcd9101610e1f565b60335460ff1615610f455760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108cd565b5f8381526099602052604090206002600b820154600160a01b900460ff166003811115611d3b57611d3b61287c565b14611d595760405163c494657160e01b815260040160405180910390fd5b60025f908152609c6020527f75de1d63ccf63b1f38d98add9d8551d4b8314484fe5658df70a18f2499ec4fb480548290611d9290612bc2565b918290555060015f908152609c6020527f759fbb3c7535ea6cd791a268d7e54d5bf43408007315741bf51b70650b77f6a5805492935090918290611dd590612baa565b9182905550905084611e715760088301546001600160a01b03163314611e0e5760405163a91da8ff60e01b815260040160405180910390fd5b611e188183612b34565b611e23826003612b5b565b1115611e715760405162461bcd60e51b815260206004820152600f60248201527f424654207265737472696374696f6e000000000000000000000000000000000060448201526064016108cd565b600b8301546001600160a01b031680611e9d5760405163313f077360e21b815260040160405180910390fd5b600b8401805460ff60a01b1916600160a01b17905560d3546004850155426005850181905560d054611ece91612b34565b6006850155600784018054905f611ee483612baa565b90915550506001840180545f90915560cf54604051630890c1a760e21b81526001600160a01b0390911690632243069c903490611f2b908c9086908c908c90600401612e1e565b5f604051808303818588803b158015611f42575f80fd5b505af1158015611f54573d5f803e3d5ffd5b50505050505050505050505050565b6065546001600160a01b03163314610f455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108cd565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f856001600160a01b03166120238686612440565b6001600160a01b0316146120795760405162461bcd60e51b815260206004820152601b60248201527f7075626b657920616e642061646472657373206d69736d61746368000000000060448201526064016108cd565b6001600160a01b0387165f908152609a6020526040902054156120af57604051631387ecef60e21b815260040160405180910390fd5b6001600160a01b0386165f908152609b6020526040902054156120e55760405163b5013d2b60e01b815260040160405180910390fd5b6097546120f3816001612b34565b6001600160a01b038981165f908152609a60209081526040808320859055928b168252609b815291812083905560028152609c9091527f75de1d63ccf63b1f38d98add9d8551d4b8314484fe5658df70a18f2499ec4fb480549294509061215983612baa565b919050555081609781905550604051806101a001604052808581526020015f81526020018a81526020018a81526020015f81526020015f81526020015f815260200160018152602001336001600160a01b03168152602001886001600160a01b0316815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505050908252506001600160a01b0385166020820152604001600290525f8381526099602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820180546001600160a01b039283166001600160a01b031991821617909155610120840151600984018054919093169116179055610140820151600a8201906122b89082612f0c565b50610160820151600b820180546001600160a01b039092166001600160a01b0319831681178255610180850151927fffffffffffffffffffffff0000000000000000000000000000000000000000001617600160a01b8360038111156123205761232061287c565b0217905550505050979650505050505050565b61233b611cb9565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123703390565b6040516001600160a01b03909116815260200160405180910390a1565b61239561250c565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612370565b5f54610100900460ff166124305760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f4561255e565b610f456125d4565b5f604082146124915760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207075626b657900000000000000000000000000000000000060448201526064016108cd565b5f83836040516124a2929190612fcc565b60405190819003902090506001600160a01b0381166125035760405162461bcd60e51b815260206004820152600d60248201527f656d70747920616464726573730000000000000000000000000000000000000060448201526064016108cd565b90505b92915050565b60335460ff16610f455760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108cd565b5f54610100900460ff166125c85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b6033805460ff19169055565b5f54610100900460ff1661263e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f455f54610100900460ff166126ab5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f4533611fbd565b803580151581146126c3575f80fd5b919050565b5f805f606084860312156126da575f80fd5b83359250602084013591506126f1604085016126b4565b90509250925092565b5f8083601f84011261270a575f80fd5b50813567ffffffffffffffff811115612721575f80fd5b6020830191508360208260051b850101111561273b575f80fd5b9250929050565b5f805f805f805f60a0888a031215612758575f80fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115612784575f80fd5b6127908b838c016126fa565b909650945060808a01359150808211156127a8575f80fd5b506127b58a828b016126fa565b989b979a50959850939692959293505050565b80356001600160a01b03811681146126c3575f80fd5b5f602082840312156127ee575f80fd5b6127f7826127c8565b9392505050565b5f806040838503121561280f575f80fd5b82359150602083013563ffffffff81168114612829575f80fd5b809150509250929050565b5f8060408385031215612845575f80fd5b61284e836127c8565b915061285c602084016126b4565b90509250929050565b5f60208284031215612875575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b600481106128ac57634e487b7160e01b5f52602160045260245ffd5b9052565b5f6101a08f835260208f60208501528e60408501528d60608501528c60808501528b60a08501528a60c08501528960e08501526001600160a01b03808a166101008601528089166101208601525081610140850152865180838601525f92505b8083101561292f578783018201518584016101c0015291810191612910565b6101c092505f83828701015282601f19601f83011686010193505050506129626101608301856001600160a01b03169052565b612970610180830184612890565b9e9d5050505050505050505050505050565b5f60208284031215612992575f80fd5b813560048110612503575f80fd5b5f8083601f8401126129b0575f80fd5b50813567ffffffffffffffff8111156129c7575f80fd5b60208301915083602082850101111561273b575f80fd5b5f805f805f608086880312156129f2575f80fd5b6129fb866127c8565b9450612a09602087016127c8565b935060408601359250606086013567ffffffffffffffff811115612a2b575f80fd5b612a37888289016129a0565b969995985093965092949392505050565b5f8060408385031215612a59575f80fd5b8235915061285c602084016127c8565b5f805f8060608587031215612a7c575f80fd5b612a85856127c8565b935060208501359250604085013567ffffffffffffffff811115612aa7575f80fd5b612ab3878288016129a0565b95989497509550505050565b5f60208284031215612acf575f80fd5b6127f7826126b4565b5f805f60408486031215612aea575f80fd5b83359250602084013567ffffffffffffffff811115612b07575f80fd5b612b13868287016129a0565b9497909650939450505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561250657612506612b20565b634e487b7160e01b5f52603260045260245ffd5b808202811582820484141761250657612506612b20565b600181811c90821680612b8657607f821691505b602082108103612ba457634e487b7160e01b5f52602260045260245ffd5b50919050565b5f60018201612bbb57612bbb612b20565b5060010190565b5f81612bd057612bd0612b20565b505f190190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8781525f6001600160a01b03808916602084015280881660408401525085606083015284608083015260c060a0830152612c3d60c083018486612bd7565b9998505050505050505050565b634e487b7160e01b5f52604160045260245ffd5b601f821115612ca257805f5260205f20601f840160051c81016020851015612c835750805b601f840160051c820191505b81811015610d73575f8155600101612c8f565b505050565b67ffffffffffffffff831115612cbf57612cbf612c4a565b612cd383612ccd8354612b72565b83612c5e565b5f601f841160018114612d04575f8515612ced5750838201355b5f19600387901b1c1916600186901b178355610d73565b5f83815260208120601f198716915b82811015612d335786850135825560209485019460019092019101612d13565b5086821015612d4f575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8681525f6001600160a01b03808816602084015280871660408401525084606083015260a06080830152612d9960a083018486612bd7565b98975050505050505050565b5f8154612db181612b72565b808552602060018381168015612dce5760018114612de857612e13565b60ff1985168884015283151560051b880183019550612e13565b865f52825f205f5b85811015612e0b5781548a8201860152908301908401612df0565b890184019650505b505050505092915050565b84815283602082015263ffffffff831660408201526080606082015281546080820152600182015460a0820152600282015460c0820152600382015460e082015260048201546101008201526005820154610120820152600682015461014082015260078201546101608201525f612ea060088401546001600160a01b031690565b6001600160a01b039081166101808401526009840154166101a08084018290526101c084015250612ed86102208301600a8501612da5565b600b8401546001600160a01b0381166101e0850152612f01610200850160ff8360a01c16612890565b509695505050505050565b815167ffffffffffffffff811115612f2657612f26612c4a565b612f3a81612f348454612b72565b84612c5e565b602080601f831160018114612f6d575f8415612f565750858301515b5f19600386901b1c1916600185901b178555612fc4565b5f85815260208120601f198616915b82811015612f9b57888601518255948401946001909101908401612f7c565b5085821015612fb857878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b818382375f910190815291905056fea164736f6c6343000818000a",
  "deployedBytecode": "0x60806040526004361061025d575f3560e01c80638ddc74de1161014b578063c4d66de8116100c6578063d83b0e141161007c578063f2fde38b11610062578063f2fde38b14610695578063f41a9642146106b4578063f580ffcb146106d3575f80fd5b8063d83b0e1414610657578063e2fdcc1714610676575f80fd5b8063ca99e838116100ac578063ca99e83814610610578063cc3ab92314610623578063d11d068114610638575f80fd5b8063c4d66de8146105dc578063c65066d4146105fb575f80fd5b8063af70cba51161011b578063beb2675511610101578063beb2675514610573578063bedb86fb1461059e578063bfd6fc3f146105bd575f80fd5b8063af70cba514610512578063b447297014610531575f80fd5b80638ddc74de146104935780639ad42030146104a65780639b19251a146104c5578063a953791f146104f3575f80fd5b80635c975abb116101db57806376cd940e116101ab57806386d203ab1161019157806386d203ab146104365780638ae39cac146104615780638da5cb5b14610476575f80fd5b806376cd940e1461040e5780637f05b9ef14610422575f80fd5b80635c975abb146103805780636ba7ccff146103a3578063715018a6146103db57806371e10cfa146103ef575f80fd5b8063169abefc11610230578063262c0e6611610216578063262c0e66146103395780633478874b1461034c57806353d6fd5914610361575f80fd5b8063169abefc146102fb5780631739668714610326575f80fd5b8063015bb180146102615780630ebb172a14610282578063111f4630146102a557806311c7d144146102dc575b5f80fd5b34801561026c575f80fd5b5061028061027b3660046126c8565b6106f2565b005b34801561028d575f80fd5b5060d0545b6040519081526020015b60405180910390f35b3480156102b0575f80fd5b5060d2546102c4906001600160a01b031681565b6040516001600160a01b03909116815260200161029c565b3480156102e7575f80fd5b506102926102f6366004612742565b610875565b348015610306575f80fd5b506102926103153660046127de565b609a6020525f908152604090205481565b6102806103343660046127fe565b610c0d565b6102806103473660046127fe565b610d7a565b348015610357575f80fd5b5061029260d05481565b34801561036c575f80fd5b5061028061037b366004612834565b610dc0565b34801561038b575f80fd5b5060335460ff165b604051901515815260200161029c565b3480156103ae575f80fd5b506103c26103bd366004612865565b610e2b565b60405161029c9d9c9b9a999897969594939291906128b0565b3480156103e6575f80fd5b50610280610f34565b3480156103fa575f80fd5b50610280610409366004612865565b610f47565b348015610419575f80fd5b5060d354610292565b34801561042d575f80fd5b5060d154610292565b348015610441575f80fd5b50610292610450366004612982565b609c6020525f908152604090205481565b34801561046c575f80fd5b5061029260d15481565b348015610481575f80fd5b506065546001600160a01b03166102c4565b6102806104a13660046127fe565b610fdc565b3480156104b1575f80fd5b506102806104c03660046129de565b61126f565b3480156104d0575f80fd5b506103936104df3660046127de565b60986020525f908152604090205460ff1681565b3480156104fe575f80fd5b5061028061050d366004612a48565b6113a7565b34801561051d575f80fd5b5061028061052c366004612a69565b6114f6565b34801561053c575f80fd5b5060d35460d45460d55460d6546105539392919084565b60408051948552602085019390935291830152606082015260800161029c565b34801561057e575f80fd5b5061029261058d3660046127de565b609b6020525f908152604090205481565b3480156105a9575f80fd5b506102806105b8366004612abf565b611619565b3480156105c8575f80fd5b506102806105d7366004612865565b61163a565b3480156105e7575f80fd5b506102806105f63660046127de565b61167e565b348015610606575f80fd5b5061029260d75481565b61028061061e3660046127fe565b611805565b34801561062e575f80fd5b5061029260975481565b348015610643575f80fd5b506102806106523660046127de565b611819565b348015610662575f80fd5b50610280610671366004612a48565b61186f565b348015610681575f80fd5b5060cf546102c4906001600160a01b031681565b3480156106a0575f80fd5b506102806106af3660046127de565b61199e565b3480156106bf575f80fd5b506102806106ce366004612ad8565b611a2b565b3480156106de575f80fd5b506102806106ed366004612865565b611c24565b6106fa611cb9565b335f9081526098602052604090205460ff1661072957604051630b094f2760e31b815260040160405180910390fd5b5f8381526099602052604090206002600b820154600160a01b900460ff1660038111156107585761075861287c565b146107765760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b031633146107a35760405163a91da8ff60e01b815260040160405180910390fd5b5f82156107b657506001810180545f9091555b5f8185845f01546107c79190612b34565b6107d19190612b34565b90505f836007015460016107e59190612b34565b6007850181905582855560cf546040516309a12e3b60e21b8152600481018a905260248101839052336044820152606481018590526084810189905260a481018690529192506001600160a01b031690632684b8ec9060c4015b5f604051808303815f87803b158015610856575f80fd5b505af1158015610868573d5f803e3d5ffd5b5050505050505050505050565b60d2545f906001600160a01b031633146108d65760405162461bcd60e51b815260206004820152600760248201527f6e6f74204d50430000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b83821480156108e457508315155b6109305760405162461bcd60e51b815260206004820152600f60248201527f6d69736d61746368206c656e677468000000000000000000000000000000000060448201526064016108cd565b60d380545f90610941906001612b34565b90508981146109925760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642062617463682069640000000000000000000000000000000060448201526064016108cd565b808255600382015489906109a7906001612b34565b146109f45760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420737461727445706f6368000000000000000000000000000060448201526064016108cd565b878910610a435760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420656e6445706f63680000000000000000000000000000000060448201526064016108cd565b60d1545f5b87811015610b40575f82888884818110610a6457610a64612b47565b90506020020135610a759190612b5b565b90505f609b5f8c8c86818110610a8d57610a8d612b47565b9050602002016020810190610aa291906127de565b6001600160a01b0316815260208082019290925260409081015f908120548082526099909352908120919250600b820154600160a01b900460ff166003811115610aee57610aee61287c565b03610b0c576040516317876d5f60e11b815260040160405180910390fd5b82816001015f828254610b1f9190612b34565b90915550610b2f90508389612b34565b97505060019092019150610a489050565b50436001840155600283018a90556003830189905560cf546040516338ef349f60e21b8152600481018d9052602481018690526001600160a01b039091169063e3bcd27c906044015f604051808303815f87803b158015610b9f575f80fd5b505af1158015610bb1573d5f803e3d5ffd5b5050604080518d8152602081018d9052908101879052606081018490528d92507f57f14bf0f24025b2c737413d121021e1a6ede039533e1215eda6f20002baf0a1915060800160405180910390a2505050979650505050505050565b610c15611cb9565b335f9081526098602052604090205460ff16610c4457604051630b094f2760e31b815260040160405180910390fd5b5f8281526099602052604090206002600b820154600160a01b900460ff166003811115610c7357610c7361287c565b14610c915760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b03163314610cbe5760405163a91da8ff60e01b815260040160405180910390fd5b600b8101546001600160a01b031680610cea5760405163313f077360e21b815260040160405180910390fd5b60018201548015610d73575f600184015560cf54604051630baf0f1560e31b815260048101879052602481018390526001600160a01b03848116604483015263ffffffff8716606483015290911690635d7878a89034906084015f604051808303818588803b158015610d5b575f80fd5b505af1158015610d6d573d5f803e3d5ffd5b50505050505b5050505050565b610d82611cb9565b335f9081526098602052604090205460ff16610db157604051630b094f2760e31b815260040160405180910390fd5b610dbc825f83611d0c565b5050565b610dc8611f63565b6001600160a01b0382165f81815260986020908152604091829020805460ff19168515159081179091558251938452908301527ff6019ec0a78d156d249a1ec7579e2321f6ac7521d6e1d2eacf90ba4a184dcceb91015b60405180910390a15050565b60996020525f9081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0180549a9b999a9899979896979596949593946001600160a01b03938416949290931692610e9790612b72565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec390612b72565b8015610f0e5780601f10610ee557610100808354040283529160200191610f0e565b820191905f5260205f20905b815481529060010190602001808311610ef157829003601f168201915b505050600b90930154919250506001600160a01b0381169060ff600160a01b909104168d565b610f3c611f63565b610f455f611fbd565b565b610f4f611f63565b5f8111610f9e5760405162461bcd60e51b815260206004820152600c60248201527f64616c617954696d653d3d30000000000000000000000000000000000000000060448201526064016108cd565b60d080549082905560408051838152602081018390527f08cb0bf599c925a6240976039d9d4d3201d88d2ba83703b890049356cdbb67e69101610e1f565b610fe4611cb9565b335f9081526098602052604090205460ff1661101357604051630b094f2760e31b815260040160405180910390fd5b5f82815260996020526040902060088101546001600160a01b0316331461104d5760405163a91da8ff60e01b815260040160405180910390fd5b600b8101546001600160a01b0316806110795760405163313f077360e21b815260040160405180910390fd5b6001600b830154600160a01b900460ff16600381111561109b5761109b61287c565b1480156110ac575042826006015411155b6110f85760405162461bcd60e51b815260206004820152601460248201527f4e6f7420616c6c6f77656420746f20636c69616d00000000000000000000000060448201526064016108cd565b81546001830180545f80865591829055600785018054919261111983612baa565b9091555050600b8401805460ff60a01b19167403000000000000000000000000000000000000000017905560015f908152609c6020527f759fbb3c7535ea6cd791a268d7e54d5bf43408007315741bf51b70650b77f6a580549161117c83612bc2565b909155505060035f908152609c6020527fa166308694002ada49a080be065b41ffb107f08c6cd338f4ec60e54116d066b78054916111b983612baa565b909155505060088401546001600160a01b039081165f908152609a6020526040812055600985015461120291166001600160a01b03165f908152609b602052604090205f199055565b60cf54604051632947689560e11b81523360048201526024810188905260448101849052606481018390526001600160a01b03858116608483015263ffffffff881660a48301529091169063528ed12a90349060c4015f604051808303818588803b158015610856575f80fd5b611277611cb9565b335f9081526098602052604090205460ff166112a657604051630b094f2760e31b815260040160405180910390fd5b60d3545f6112b982338987878a8c61200e565b60cf54604051631badded560e01b81529192506001600160a01b031690631badded5906112f690849033908c908b9089908c908c90600401612bff565b5f604051808303815f87803b15801561130d575f80fd5b505af115801561131f573d5f803e3d5ffd5b5050604080518481523360208201527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac935001905060405180910390a1604080518281526001600160a01b03881660208201527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb691015b60405180910390a150505050505050565b335f9081526098602052604090205460ff166113d657604051630b094f2760e31b815260040160405180910390fd5b6001600160a01b0381166113fd5760405163e99d5ac560e01b815260040160405180910390fd5b5f8281526099602052604090206002600b820154600160a01b900460ff16600381111561142c5761142c61287c565b1461144a5760405163c494657160e01b815260040160405180910390fd5b60088101546001600160a01b03163381146114785760405163a91da8ff60e01b815260040160405180910390fd5b6008820180546001600160a01b0319166001600160a01b038581169182179092559082165f908152609a60209081526040808320839055838352918290208790558151878152908101929092527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac910160405180910390a150505050565b6114fe611cb9565b335f9081526098602052604090205460ff1661152d57604051630b094f2760e31b815260040160405180910390fd5b60d354335f61154183838988888b8761200e565b60cf54604051631badded560e01b81529192506001600160a01b031690631badded59061157e90849086908c908c908a908d908d90600401612bff565b5f604051808303815f87803b158015611595575f80fd5b505af11580156115a7573d5f803e3d5ffd5b5050604080518481523360208201527f4078101d3657bf2f1ee46f64d5c94266d244d71bb0daa460336d3d6f11c9a4ac935001905060405180910390a1604080518281525f60208201527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb69101611396565b611621611f63565b80156116325761162f612333565b50565b61162f61238d565b611642611f63565b60d78190556040518181527fe58685f6b78e6d567d2ed9d7c5efb779c4cd91c63c76763a0e3204a5671f4705906020015b60405180910390a150565b5f54610100900460ff161580801561169c57505f54600160ff909116105b806116b55750303b1580156116b557505f5460ff166001145b6117275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108cd565b5f805460ff191660011790558015611748575f805461ff0019166101001790555b621baf8060d0556602b4201eac900060d15560408051608081018252600180825243602083018190525f938301849052606090920183905260d381905560d49190915560d582905560d69190915560cf80546001600160a01b0319166001600160a01b03851617905560d7556117bc6123c6565b6117c4612438565b8015610dbc575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e1f565b61180d611f63565b610dbc82600183611d0c565b611821611f63565b60d280546001600160a01b0319166001600160a01b0383169081179091556040519081527fc6759872346bc2093e270f2fa00d99d7bcdde60a410a3e9956b34196d42fee7690602001611673565b335f9081526098602052604090205460ff1661189e57604051630b094f2760e31b815260040160405180910390fd5b5f82815260996020526040902060088101546001600160a01b031633146118d85760405163a91da8ff60e01b815260040160405180910390fd5b6002600b820154600160a01b900460ff1660038111156118fa576118fa61287c565b146119185760405163c494657160e01b815260040160405180910390fd5b6001600160a01b03821661193f5760405163e99d5ac560e01b815260040160405180910390fd5b600b810180546001600160a01b0319166001600160a01b0384169081179091556040805185815260208101929092527f357bb123cabaf224688e3d8de5feb37d685dc3a27012a7bce1201c49bc369cb6910160405180910390a1505050565b6119a6611f63565b6001600160a01b038116611a225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108cd565b61162f81611fbd565b335f9081526098602052604090205460ff16611a5a57604051630b094f2760e31b815260040160405180910390fd5b5f8381526099602052604090206002600b820154600160a01b900460ff166003811115611a8957611a8961287c565b14611aa75760405163c494657160e01b815260040160405180910390fd5b60098101546001600160a01b0316338114611ad557604051636b95264b60e01b815260040160405180910390fd5b60d7548260030154611ae79190612b34565b60d3541015611b385760405162461bcd60e51b815260206004820152601860248201527f7369676e6572207570646174696e67207468726f74746c65000000000000000060448201526064016108cd565b5f611b438585612440565b6001600160a01b0381165f908152609b602052604090205490915015611b7c5760405163b5013d2b60e01b815260040160405180910390fd5b600a8301611b8b858783612ca7565b506009830180546001600160a01b0319166001600160a01b038381169182179092555f908152609b60205260408082208990559184168152205f19905560d354600384015560078301545f90611be2906001612b34565b6007850181905560cf546040516359942b8160e11b81529192506001600160a01b03169063b32857029061083f908a908790879087908d908d90600401612d61565b611c2c611f63565b805f03611c7b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964206e657752657761726400000000000000000000000000000060448201526064016108cd565b60d180549082905560408051838152602081018390527ff67f33e8589d3ea0356303c0f9a8e764873692159f777ff79e4fc523d389dfcd9101610e1f565b60335460ff1615610f455760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108cd565b5f8381526099602052604090206002600b820154600160a01b900460ff166003811115611d3b57611d3b61287c565b14611d595760405163c494657160e01b815260040160405180910390fd5b60025f908152609c6020527f75de1d63ccf63b1f38d98add9d8551d4b8314484fe5658df70a18f2499ec4fb480548290611d9290612bc2565b918290555060015f908152609c6020527f759fbb3c7535ea6cd791a268d7e54d5bf43408007315741bf51b70650b77f6a5805492935090918290611dd590612baa565b9182905550905084611e715760088301546001600160a01b03163314611e0e5760405163a91da8ff60e01b815260040160405180910390fd5b611e188183612b34565b611e23826003612b5b565b1115611e715760405162461bcd60e51b815260206004820152600f60248201527f424654207265737472696374696f6e000000000000000000000000000000000060448201526064016108cd565b600b8301546001600160a01b031680611e9d5760405163313f077360e21b815260040160405180910390fd5b600b8401805460ff60a01b1916600160a01b17905560d3546004850155426005850181905560d054611ece91612b34565b6006850155600784018054905f611ee483612baa565b90915550506001840180545f90915560cf54604051630890c1a760e21b81526001600160a01b0390911690632243069c903490611f2b908c9086908c908c90600401612e1e565b5f604051808303818588803b158015611f42575f80fd5b505af1158015611f54573d5f803e3d5ffd5b50505050505050505050505050565b6065546001600160a01b03163314610f455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108cd565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f856001600160a01b03166120238686612440565b6001600160a01b0316146120795760405162461bcd60e51b815260206004820152601b60248201527f7075626b657920616e642061646472657373206d69736d61746368000000000060448201526064016108cd565b6001600160a01b0387165f908152609a6020526040902054156120af57604051631387ecef60e21b815260040160405180910390fd5b6001600160a01b0386165f908152609b6020526040902054156120e55760405163b5013d2b60e01b815260040160405180910390fd5b6097546120f3816001612b34565b6001600160a01b038981165f908152609a60209081526040808320859055928b168252609b815291812083905560028152609c9091527f75de1d63ccf63b1f38d98add9d8551d4b8314484fe5658df70a18f2499ec4fb480549294509061215983612baa565b919050555081609781905550604051806101a001604052808581526020015f81526020018a81526020018a81526020015f81526020015f81526020015f815260200160018152602001336001600160a01b03168152602001886001600160a01b0316815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505050908252506001600160a01b0385166020820152604001600290525f8381526099602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820180546001600160a01b039283166001600160a01b031991821617909155610120840151600984018054919093169116179055610140820151600a8201906122b89082612f0c565b50610160820151600b820180546001600160a01b039092166001600160a01b0319831681178255610180850151927fffffffffffffffffffffff0000000000000000000000000000000000000000001617600160a01b8360038111156123205761232061287c565b0217905550505050979650505050505050565b61233b611cb9565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123703390565b6040516001600160a01b03909116815260200160405180910390a1565b61239561250c565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612370565b5f54610100900460ff166124305760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f4561255e565b610f456125d4565b5f604082146124915760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207075626b657900000000000000000000000000000000000060448201526064016108cd565b5f83836040516124a2929190612fcc565b60405190819003902090506001600160a01b0381166125035760405162461bcd60e51b815260206004820152600d60248201527f656d70747920616464726573730000000000000000000000000000000000000060448201526064016108cd565b90505b92915050565b60335460ff16610f455760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108cd565b5f54610100900460ff166125c85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b6033805460ff19169055565b5f54610100900460ff1661263e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f455f54610100900460ff166126ab5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108cd565b610f4533611fbd565b803580151581146126c3575f80fd5b919050565b5f805f606084860312156126da575f80fd5b83359250602084013591506126f1604085016126b4565b90509250925092565b5f8083601f84011261270a575f80fd5b50813567ffffffffffffffff811115612721575f80fd5b6020830191508360208260051b850101111561273b575f80fd5b9250929050565b5f805f805f805f60a0888a031215612758575f80fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115612784575f80fd5b6127908b838c016126fa565b909650945060808a01359150808211156127a8575f80fd5b506127b58a828b016126fa565b989b979a50959850939692959293505050565b80356001600160a01b03811681146126c3575f80fd5b5f602082840312156127ee575f80fd5b6127f7826127c8565b9392505050565b5f806040838503121561280f575f80fd5b82359150602083013563ffffffff81168114612829575f80fd5b809150509250929050565b5f8060408385031215612845575f80fd5b61284e836127c8565b915061285c602084016126b4565b90509250929050565b5f60208284031215612875575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b600481106128ac57634e487b7160e01b5f52602160045260245ffd5b9052565b5f6101a08f835260208f60208501528e60408501528d60608501528c60808501528b60a08501528a60c08501528960e08501526001600160a01b03808a166101008601528089166101208601525081610140850152865180838601525f92505b8083101561292f578783018201518584016101c0015291810191612910565b6101c092505f83828701015282601f19601f83011686010193505050506129626101608301856001600160a01b03169052565b612970610180830184612890565b9e9d5050505050505050505050505050565b5f60208284031215612992575f80fd5b813560048110612503575f80fd5b5f8083601f8401126129b0575f80fd5b50813567ffffffffffffffff8111156129c7575f80fd5b60208301915083602082850101111561273b575f80fd5b5f805f805f608086880312156129f2575f80fd5b6129fb866127c8565b9450612a09602087016127c8565b935060408601359250606086013567ffffffffffffffff811115612a2b575f80fd5b612a37888289016129a0565b969995985093965092949392505050565b5f8060408385031215612a59575f80fd5b8235915061285c602084016127c8565b5f805f8060608587031215612a7c575f80fd5b612a85856127c8565b935060208501359250604085013567ffffffffffffffff811115612aa7575f80fd5b612ab3878288016129a0565b95989497509550505050565b5f60208284031215612acf575f80fd5b6127f7826126b4565b5f805f60408486031215612aea575f80fd5b83359250602084013567ffffffffffffffff811115612b07575f80fd5b612b13868287016129a0565b9497909650939450505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561250657612506612b20565b634e487b7160e01b5f52603260045260245ffd5b808202811582820484141761250657612506612b20565b600181811c90821680612b8657607f821691505b602082108103612ba457634e487b7160e01b5f52602260045260245ffd5b50919050565b5f60018201612bbb57612bbb612b20565b5060010190565b5f81612bd057612bd0612b20565b505f190190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8781525f6001600160a01b03808916602084015280881660408401525085606083015284608083015260c060a0830152612c3d60c083018486612bd7565b9998505050505050505050565b634e487b7160e01b5f52604160045260245ffd5b601f821115612ca257805f5260205f20601f840160051c81016020851015612c835750805b601f840160051c820191505b81811015610d73575f8155600101612c8f565b505050565b67ffffffffffffffff831115612cbf57612cbf612c4a565b612cd383612ccd8354612b72565b83612c5e565b5f601f841160018114612d04575f8515612ced5750838201355b5f19600387901b1c1916600186901b178355610d73565b5f83815260208120601f198716915b82811015612d335786850135825560209485019460019092019101612d13565b5086821015612d4f575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8681525f6001600160a01b03808816602084015280871660408401525084606083015260a06080830152612d9960a083018486612bd7565b98975050505050505050565b5f8154612db181612b72565b808552602060018381168015612dce5760018114612de857612e13565b60ff1985168884015283151560051b880183019550612e13565b865f52825f205f5b85811015612e0b5781548a8201860152908301908401612df0565b890184019650505b505050505092915050565b84815283602082015263ffffffff831660408201526080606082015281546080820152600182015460a0820152600282015460c0820152600382015460e082015260048201546101008201526005820154610120820152600682015461014082015260078201546101608201525f612ea060088401546001600160a01b031690565b6001600160a01b039081166101808401526009840154166101a08084018290526101c084015250612ed86102208301600a8501612da5565b600b8401546001600160a01b0381166101e0850152612f01610200850160ff8360a01c16612890565b509695505050505050565b815167ffffffffffffffff811115612f2657612f26612c4a565b612f3a81612f348454612b72565b84612c5e565b602080601f831160018114612f6d575f8415612f565750858301515b5f19600386901b1c1916600185901b178555612fc4565b5f85815260208120601f198616915b82811015612f9b57888601518255948401946001909101908401612f7c565b5085821015612fb857878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b818382375f910190815291905056fea164736f6c6343000818000a",
  "devdoc": {
    "events": {
      "DistributeReward(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when rewards are distributed",
        "params": {
          "amount": "the total that distributed",
          "batchId": "the current batch id",
          "endEpoch": "end epoch number",
          "rpb": "the current reward per block",
          "startEpoch": "start epoch number"
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RewardUpdate(uint256,uint256)": {
        "details": "Emitted when the proxy update threshold in 'updateBlockReward()'.      Note from maintainer:      for compatibility, this ambiguous event is retained",
        "params": {
          "newReward": "new block reward",
          "oldReward": "old block reward"
        }
      },
      "SequencerOwnerChanged(uint256,address)": {
        "details": "Emitted when sequencer owner is changed",
        "params": {
          "_owner": "the sequencer owner",
          "_seqId": "the sequencerId"
        }
      },
      "SequencerRewardRecipientChanged(uint256,address)": {
        "details": "Emitted when reward recipient address update in 'setSequencerRewardRecipient'",
        "params": {
          "_recipient": "the address receive reward token",
          "_seqId": "the sequencerId"
        }
      },
      "SetSignerUpdateThrottle(uint256)": {
        "details": "Emitted when SignerUpdateThrottle is updated",
        "params": {
          "_n": "new min value"
        }
      },
      "SetWhitelist(address,bool)": {
        "details": "Emitted if owner call 'setWhitelist'",
        "params": {
          "_user": "the address who can lock token",
          "_yes": "white address state"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UpdateMpc(address)": {
        "details": "Emitted when mpc address update in 'UpdateMpc'",
        "params": {
          "_newMpc": "new min lock."
        }
      },
      "WithrawDelayTimeChange(uint256,uint256)": {
        "details": "Emitted when WITHDRAWAL_DELAY is updated.",
        "params": {
          "_cur": "current withdraw delay time",
          "_prev": "previours withdraw delay time"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "BLOCK_REWARD()": {
        "details": "BLOCK_REWARD returns the current reward per block      just for compatibility, this ambiguous func is added"
      },
      "WITHDRAWAL_DELAY()": {
        "details": "WITHDRAWAL_DELAY returns the period      just for compatibility, this ambiguous func is added"
      },
      "batchSubmitRewards(uint256,uint256,uint256,address[],uint256[])": {
        "details": "batchSubmitRewards Allow to submit L2 sequencer block information, and attach Metis reward tokens for reward distribution",
        "params": {
          "_batchId": "The batchId that submitted the reward is that",
          "_blocks": "How many blocks each sequencer finished.",
          "_endEpoch": "The endEpoch that submitted the reward is that",
          "_seqs": "Those sequencers can receive rewards",
          "_startEpoch": "The startEpoch that submitted the reward is that"
        }
      },
      "currentBatch()": {
        "details": "currentBatch returns current batch id"
      },
      "forceUnlock(uint256,uint32)": {
        "details": "forceUnlock Allow owner to force a sequencer node to exit",
        "params": {
          "_l2Gas": "l2 gas limit, see above for the detail",
          "_seqId": "the sequencer id"
        }
      },
      "lockFor(address,uint256,bytes)": {
        "details": "lockFor lock Metis and participate in the sequencer node      the msg.sender will be owner of the sequencer      the owner has abilities to leverage lock/relock/unlock/cliam      **Note**: the locking amount will be trasnfered from msg.sender      and you need to approve the Metis of msg.sender to **LockingInfo** contract      instead of this LockingPool contract      the default reward recipient is an empty address      you need to update it using setSequencerRewardRecipient afterward",
        "params": {
          "_amount": "Amount of L1 metis token to lock for.",
          "_signer": "Sequencer signer address",
          "_signerPubkey": "Sequencer signer pubkey, it should be uncompressed"
        }
      },
      "lockWithRewardRecipient(address,address,uint256,bytes)": {
        "details": "lockWithRewardRecipient is the same with lockFor, but you can provide a reward receipent",
        "params": {
          "_amount": "Amount of L1 metis token to lock for.",
          "_rewardRecipient": "Sequencer reward receiptent        you can use an empty address if you haven't choosed an address        and update it using `setSequencerRewardRecipient` after then",
          "_signer": "Sequencer signer address",
          "_signerPubkey": "Sequencer signer pubkey         it should be uncompressed and matched with signer address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "relock(uint256,uint256,bool)": {
        "details": "relock allow sequencer operator to increase the amount of locked positions",
        "params": {
          "_amount": "amount of token to relock, it can be 0 if you want to relock your rewrad",
          "_lockReward": "use true if lock the current rewards",
          "_seqId": "the id of your sequencer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setPause(bool)": {
        "details": "setPause",
        "params": {
          "_yes": "pause or not"
        }
      },
      "setSequencerOwner(uint256,address)": {
        "details": "setSequencerOwner update sequencer owner",
        "params": {
          "_owner": "the new owner",
          "_seqId": "The sequencerId"
        }
      },
      "setSequencerRewardRecipient(uint256,address)": {
        "details": "setSequencerRewardRecipient Allow sequencer owner to set a reward recipient",
        "params": {
          "_recipient": "Who will receive the reward token",
          "_seqId": "The sequencerId"
        }
      },
      "setSignerUpdateThrottle(uint256)": {
        "details": "setSignerUpdateThrottle  set signerUpdateThrottle",
        "params": {
          "_n": "the new value of the throttle        Note: it can be 0"
        }
      },
      "setWhitelist(address,bool)": {
        "details": "setWhitelist Allow owner to update white address list",
        "params": {
          "_addr": "the address who can lock token",
          "_yes": "white address state"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint256,uint32)": {
        "details": "unlock your metis and exit the sequencer node      the reward will be arrived by L1Bridge first      and you need to wait the exit period and call      unlockClaim to cliam your locked token",
        "params": {
          "_l2Gas": "the L2 gas limit for L1Bridge.       the reward is distributed by bridge       so you need to pay the ETH as the bridge fee",
          "_seqId": "sequencer id"
        }
      },
      "unlockClaim(uint256,uint32)": {
        "details": "unlockClaim claim your locked tokens after the waiting period is passed      l2 fee is required if you have unclaimed reward",
        "params": {
          "_l2Gas": "l2 gas limit",
          "_seqId": "sequencer id"
        }
      },
      "updateBlockReward(uint256)": {
        "details": "updateBlockReward  Allow owner to set per block reward",
        "params": {
          "newReward": "the block reward"
        }
      },
      "updateMpc(address)": {
        "details": "updateMpc update the mpc address",
        "params": {
          "_newMpc": "new mpc address"
        }
      },
      "updateSigner(uint256,bytes)": {
        "details": "updateSigner Allow sqeuencer to update new signers to replace old signer addresses，and NFT holder will be transfer driectly",
        "params": {
          "_seqId": "the sequencer id",
          "_signerPubkey": "the new signer pubkey address"
        }
      },
      "updateWithdrawDelayTimeValue(uint256)": {
        "details": "updateWithdrawDelayTimeValue Allow owner to set withdraw delay time.",
        "params": {
          "_time": "new withdraw delay time"
        }
      },
      "withdrawRewards(uint256,uint32)": {
        "details": "withdrawRewards withdraw current rewards      l2 fee is required",
        "params": {
          "_l2Gas": "bridge reward to L2 gasLimit",
          "_seqId": "unique integer to identify a sequencer."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1959,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "totalSequencers",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 1963,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "whitelist",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1968,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "sequencers",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_struct(Sequencer)2621_storage)"
      },
      {
        "astId": 1972,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "seqOwners",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1976,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "seqSigners",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1981,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "seqStatuses",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_enum(Status)2593,t_uint256)"
      },
      {
        "astId": 2327,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 838,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "escrow",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(ILockingInfo)2528"
      },
      {
        "astId": 840,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "exitDelayPeriod",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 842,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 844,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "mpcAddress",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 847,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "curBatchState",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(BatchState)835_storage"
      },
      {
        "astId": 849,
        "contract": "contracts/LockingPool.sol:LockingPool",
        "label": "signerUpdateThrottle",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILockingInfo)2528": {
        "encoding": "inplace",
        "label": "contract ILockingInfo",
        "numberOfBytes": "20"
      },
      "t_enum(Status)2593": {
        "encoding": "inplace",
        "label": "enum ISequencerInfo.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Status)2593,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Status)2593",
        "label": "mapping(enum ISequencerInfo.Status => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Sequencer)2621_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISequencerInfo.Sequencer)",
        "numberOfBytes": "32",
        "value": "t_struct(Sequencer)2621_storage"
      },
      "t_struct(BatchState)835_storage": {
        "encoding": "inplace",
        "label": "struct LockingPool.BatchState",
        "members": [
          {
            "astId": 828,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "startEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 834,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "endEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sequencer)2621_storage": {
        "encoding": "inplace",
        "label": "struct ISequencerInfo.Sequencer",
        "members": [
          {
            "astId": 2595,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2597,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2599,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "activationBatch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2601,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "updatedBatch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2603,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "deactivationBatch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2605,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "deactivationTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2607,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "unlockClaimTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2609,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "nonce",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2611,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 2613,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "signer",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 2615,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "pubkey",
            "offset": 0,
            "slot": "10",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2617,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "rewardRecipient",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 2620,
            "contract": "contracts/LockingPool.sol:LockingPool",
            "label": "status",
            "offset": 20,
            "slot": "11",
            "type": "t_enum(Status)2593"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}