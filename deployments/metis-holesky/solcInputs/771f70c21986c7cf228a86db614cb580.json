{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/SequencerSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.20;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract MetisSequencerSet is OwnableUpgradeable {\n    uint256 public epochLength;\n    address public mpcAddress;\n\n    // epoch details\n    struct Epoch {\n        uint256 number;\n        address signer;\n        uint256 startBlock;\n        uint256 endBlock;\n    }\n\n    mapping(uint256 number => Epoch epoch) public epochs; // epoch number => epoch\n\n    // current epoch number, starts from 0\n    uint256 internal currentEpochId;\n\n    // event\n    event NewEpoch(\n        uint256 indexed epochId,\n        uint256 startBlock,\n        uint256 endBlock,\n        address signer\n    );\n\n    event ReCommitEpoch(\n        uint256 indexed oldEpochId,\n        uint256 indexed newEpochId,\n        uint256 curEpochId,\n        uint256 startBlock,\n        uint256 endBlock,\n        address newSigner\n    );\n    event MpcAddressUpdated(address _newMpcAddress);\n    event EpochUpdated(uint256 _newLength);\n\n    modifier onlyMpc() {\n        require(msg.sender == mpcAddress, \"Not Mpc\");\n        _;\n    }\n\n    modifier onlyMpcOrOwner() {\n        require(\n            msg.sender == mpcAddress || msg.sender == owner(),\n            \"Not Mpc or Owner\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _initialSequencer,\n        address _mpcAddress,\n        uint256 _firstStartBlock,\n        uint256 _firstEndBlock,\n        uint256 _epochLength\n    ) external initializer {\n        mpcAddress = _mpcAddress;\n        epochLength = _epochLength;\n\n        // initial epoch\n        uint256 epochId = 0;\n\n        // We do not check if the length between the start and end block matches the epoch length\n        // the epoch length can only be used for next epoch\n        require(\n            _firstStartBlock > block.number &&\n                _firstEndBlock > _firstStartBlock,\n            \"Invalid block range\"\n        );\n\n        // initial epoch item\n        epochs[epochId] = Epoch({\n            number: epochId,\n            signer: _initialSequencer,\n            startBlock: _firstStartBlock,\n            endBlock: _firstEndBlock\n        });\n\n        emit NewEpoch(\n            epochId,\n            _firstStartBlock,\n            _firstEndBlock,\n            _initialSequencer\n        );\n\n        __Ownable_init();\n    }\n\n    function UpdateMpcAddress(address _newMpc) public onlyOwner {\n        require(_newMpc != address(0), \"Invalid new mpc\");\n        mpcAddress = _newMpc;\n        emit MpcAddressUpdated(_newMpc);\n    }\n\n    function UpdateEpochLength(uint256 _newLength) public onlyMpcOrOwner {\n        require(_newLength > 0, \"Invalid new epoch length\");\n        epochLength = _newLength;\n        emit EpochUpdated(_newLength);\n    }\n\n    // get epoch number by block\n    // It returns Max(uint256) if the height doesn't exist in any epochs\n    function getEpochByBlock(uint256 _number) public view returns (uint256) {\n        uint256 lastIndex = currentEpochId + 1;\n        for (uint256 i = lastIndex; i > 0; i--) {\n            Epoch memory epoch = epochs[i - 1];\n            if (epoch.startBlock <= _number && _number <= epoch.endBlock) {\n                return epoch.number;\n            }\n\n            // not in the last epoch\n            if (i == lastIndex && _number > epoch.endBlock) {\n                return type(uint256).max;\n            }\n        }\n\n        // return default if not found any thing\n        return type(uint256).max;\n    }\n\n    function currentEpochNumber() public view returns (uint256) {\n        return currentEpochId;\n    }\n\n    // currentEpoch returns the latest epoch\n    function currentEpoch() public view returns (Epoch memory epoch) {\n        epoch = epochs[currentEpochId];\n    }\n\n    // finalizedEpoch returns the finalized epoch\n    // the epoch won't be recommitted by `recommitEpoch`\n    // if there is no such epoch, the second return value will be false\n    function finalizedEpoch()\n        public\n        view\n        returns (Epoch memory epoch, bool exist)\n    {\n        uint256 lastIndex = currentEpochId + 1;\n        for (uint256 i = lastIndex; i > 0; i--) {\n            epoch = epochs[i - 1];\n            if (block.number > epoch.endBlock) {\n                return (epoch, true);\n            }\n        }\n        // It's epoch 0 but not exist\n        return (epoch, false);\n    }\n\n    // finalizedBlock returns the finalized block number\n    function finalizedBlock() public view returns (uint256) {\n        (Epoch memory epoch, bool exist) = finalizedEpoch();\n        if (exist) {\n            return epoch.endBlock;\n        }\n        // the last block of epoch 0\n        // since the startBlock must not be 0, so it's safe to minus 1\n        return epoch.startBlock - 1;\n    }\n\n    // get metis sequencer by block number\n    function getMetisSequencer(uint256 _number) public view returns (address) {\n        if (_number <= epochs[0].endBlock) {\n            return epochs[0].signer;\n        }\n\n        // epoch number by block\n        uint256 epochId = getEpochByBlock(_number);\n        if (epochId == type(uint256).max) {\n            return address(0);\n        }\n\n        Epoch memory epoch = epochs[epochId];\n        return epoch.signer;\n    }\n\n    function commitEpoch(\n        uint256 _newEpoch,\n        uint256 _startBlock,\n        uint256 _endBlock,\n        address _signer\n    ) external onlyMpc {\n        uint256 curEpochId = currentEpochId;\n\n        // the last epoch should be finished\n        if (curEpochId > 1) {\n            require(\n                epochs[curEpochId - 1].endBlock < block.number,\n                \"The last epoch not finished\"\n            );\n        }\n\n        // check conditions\n        require(_newEpoch == curEpochId + 1, \"Invalid new epoch number\");\n        require(\n            _endBlock > _startBlock,\n            \"End block must be greater than start block\"\n        );\n        require(\n            _endBlock - _startBlock + 1 == epochLength,\n            \"Mismatch epoch length and block length\"\n        );\n        require(\n            epochs[curEpochId].endBlock + 1 == _startBlock,\n            \"Start block must be greater than currentEpoch.endBlock by 1\"\n        );\n        require(_signer != address(0), \"Invalid signer\");\n\n        epochs[_newEpoch] = Epoch({\n            number: _newEpoch,\n            signer: _signer,\n            startBlock: _startBlock,\n            endBlock: _endBlock\n        });\n\n        currentEpochId = _newEpoch;\n        emit NewEpoch(_newEpoch, _startBlock, _endBlock, _signer);\n    }\n\n    function recommitEpoch(\n        uint256 _oldEpochId,\n        uint256 _newEpochId,\n        uint256 _startBlock,\n        uint256 _endBlock,\n        address _newSigner\n    ) external onlyMpc {\n        // check start block\n        require(_startBlock == block.number, \"Invalid start block\");\n        require(_newSigner != address(0), \"Invalid signer\");\n\n        // Note: We do not check if the length between the start and end block matches the epoch length\n\n        uint256 curEpochId = currentEpochId;\n        // Case 1: recommitEpoch occurs in the latest epoch\n        if (_oldEpochId == curEpochId) {\n            Epoch storage epoch = epochs[curEpochId];\n            // Current epoch can't be updated on the first block of the epoch\n            // If the signer can't produce the first block\n            // The mpc and consensus client should use case 2 section to recommit the epoch\n            require(epoch.startBlock < block.number, \"Conflict on end block\");\n            epoch.endBlock = block.number - 1;\n\n            // craete new epoch\n            require(_newEpochId == curEpochId + 1, \"Invalid newEpochId\");\n            require(\n                _endBlock > _startBlock,\n                \"End block must be greater than start block\"\n            );\n\n            epochs[_newEpochId] = Epoch({\n                number: _newEpochId,\n                signer: _newSigner,\n                startBlock: _startBlock,\n                endBlock: _endBlock\n            });\n            currentEpochId = _newEpochId;\n        }\n        // Case 2: recommitEpoch occurs in last but one epoch\n        else if (_oldEpochId + 1 == curEpochId) {\n            Epoch storage epoch = epochs[_oldEpochId];\n            // if the epoch is not finished then set end block to the last block\n            // if the epoch is finished, then do nothing on the epoch\n            if (epoch.endBlock >= block.number) {\n                epoch.endBlock = block.number - 1;\n            }\n\n            // update latest epoch\n            require(_newEpochId == curEpochId, \"Invalid newEpochId\");\n            require(\n                _endBlock > _startBlock,\n                \"End block must be greater than start block\"\n            );\n\n            Epoch storage existNewEpoch = epochs[_newEpochId];\n            require(\n                existNewEpoch.startBlock >= block.number,\n                \"The latest epoch producing\"\n            );\n            existNewEpoch.signer = _newSigner;\n            existNewEpoch.startBlock = _startBlock;\n            existNewEpoch.endBlock = _endBlock;\n        } else {\n            revert(\"Invalid oldEpochId\");\n        }\n\n        emit ReCommitEpoch(\n            _oldEpochId,\n            _newEpochId,\n            curEpochId,\n            _startBlock,\n            _endBlock,\n            _newSigner\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "evmVersion": "berlin",
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}